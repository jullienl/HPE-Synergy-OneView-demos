---
# This playbook can be used to perform an automated installation/upgrade of HPE firmware and drivers on Windows Server
#
# Supported with Synergy Gen10/Gen10+ servers
#
# Requirement: 
# - Synergy Service Package must be present in the HPE Oneview repository
# - AMS and iSUT packages must be present in the files/<WIN_version> folder of the Ansible project
# - Server(s) must be under the control of a HPE OneView Server Profile
# - The Windows host you wish to upgrade must be configured for remote management with Ansible 
#   (WINRM listener should be created and activated, see https://docs.ansible.com/ansible/2.5/user_guide/windows_setup.html) 
# - A Windows.yml file must be created in \group_vars for the Windows WINRM settings
#   Note: This file name (e.g. Windows) must match the group name of the inventory file used by this playbook.

# This playbook performs the following steps on each inventory host:
# - installs AMS/iSUT if they are not already installed
# - configures iSUT mode to allow OS driver updates via HPE OneView Server Profile
# - updates the OneView Server Profile to enable Firmware and OS Drivers upgrades using iSUT 
# - updates the OneView Server Profile to use the defined baseline
# - monitors the status of the upgrade process 
# - if required, reboots the Windows host once or more times for HPE drivers/firmware activation 
# - displays an installation complete message once the server is back online

- name: Perform an automated installation/upgrade of HPE firmware and drivers on Windows Server
  hosts: Windows
  collections:
    - hpe.oneview
  gather_facts: no
  vars:
    # HPE Synergy Composer configuration
    - config: "{{ playbook_dir }}/oneview_config.json"

    # Windows Server Settings (recommended to be set in a vault encrypted file)
    - administrator_password: "P@ssw0rd"

    # Folder located in <Ansible_project_dir>/files to store the EXE files
    # Use the template name: WIN_<version>. <version> is 2019, 2022, etc.
    - windows_version: "WIN_2022"
    
    # Minimum Packages required for automated drivers and Firmware installation
    - AMS_package: "AMS-cp046676.exe"
    - iSUT_package: "iSUT-cp048420.exe"

    # Synergy Service Pack must be present in Oneview repository
    # - synergy_service_pack_version: "SY-2021.05.03"
    - synergy_service_pack_version: "SY-2021.11.01"

  tasks:

# Collecting facts on firmware baseline 
    - name: Gathering facts about Firmware bundles
      oneview_firmware_driver_facts:
        config: "{{ config }}"
      delegate_to: localhost

    # - debug: var=firmware_drivers

    - name: Capturing firmware bundle "{{ synergy_service_pack_version }}" uri
      set_fact:
        firmware_Baseline_Uri: "{{ (firmware_drivers | selectattr('version', 'equalto', synergy_service_pack_version) |  map(attribute='uri') | list)[0] }}"

    # - debug: var=firmware_Baseline_Uri

# Installing iSUT and AMS on the server for online installation of HPE drivers for Windows Server

    - name: Collecting product_id found in install.xml file of the HPE iSUT package
      shell: |
        unzip -p files/{{ windows_version }}/{{ iSUT_package }} install.xml | grep "product id" | awk '{ print substr ($0, 16, 36 ) }'
      args:
        warn: false # To prevent warning
      register: iSUT_product_id  
      delegate_to: localhost

    - name: Collecting product_id found in install.xml file of the HPE AMS package
      shell: |
        unzip -p files/{{ windows_version }}/{{ AMS_package }} install.xml | grep "product id" | awk '{ print substr ($0, 16, 36 ) }'
      args:
        warn: false # To prevent warning
      register: AMS_product_id  
      delegate_to: localhost

      # - debug: msg='{{ iSUT_product_id.stdout }}'
      # - debug: msg='{{ AMS_product_id.stdout }}'

    - name: Copying HPE iSUT package file to {{ inventory_hostname }}
      win_copy:
        src: files/{{ windows_version }}/{{ iSUT_package }}
        dest: c:\Temp\sut.exe

    - name: Copying HPE AMS package file to {{ inventory_hostname }}
      win_copy:
        src: files/{{ windows_version }}/{{ AMS_package }}
        dest: c:\Temp\amsd.exe
     
    - name: Installing Integrated Smart Update Tools
      win_package:
        path: c:\Temp\sut.exe
        product_id: '{{ iSUT_product_id.stdout }}'
        arguments: /s
      register: SUT_install
      # failed_when is required because the installation of the package returns a false error.
      failed_when: "SUT_install.rc != 0 and SUT_install.rc != 1"

    - name: Installing HPE Agentless Management Service
      win_package:
        path: c:\Temp\amsd.exe 
        product_id: '{{ AMS_product_id.stdout }}'
        arguments: /s 
      register: AMS_install
      # failed_when is required because the installation of the package returns a false error.
      failed_when: "AMS_install.rc != 0 and AMS_install.rc != 1"
 
    - name: Configuring iSUT mode to allow OS driver updates via HPE OneView Server Profile
      win_shell: 
        sut.exe -set mode=autodeployÂ 
        #sut -set mode=AutoDeployReboot
        #sut -set mode=AutoStage
        #sut -set mode=OnDemand
      register: sut_status

    - debug: msg="{{ sut_status.stdout }}"

# Changing the OneView Server Profile to enable OS drivers installation using the defined SSP/SPP.    

    - name: Updating Server Profile to enable Firmware and OS Drivers using SUT and defined baseline {{ synergy_service_pack_version }}
      oneview_server_profile:
        config: "{{ config }}"
        state: "present"
        data:
          name: "{{ inventory_hostname }}"
          firmware:
            firmwareInstallType: "FirmwareAndOSDrivers" 
            # firmwareInstallType: "FirmwareOnlyOfflineMode"
            firmwareBaselineUri: "{{ firmware_Baseline_Uri }}"
            # forceInstallFirmware: true

      delegate_to: localhost
      register: result

    - debug: msg="{{ result.msg }}"

# Waiting for HPE components to be installed (if any)

    - name: Waiting for HPE components to be staged and installed... (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 100
      delay: 30 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost

    - set_fact:
        server_up_to_date: true
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated"
      
# If required, rebooting host for the HPE drivers/firmware activation

    - name: Rebooting host (if required) for the HPE firmware and/or OS drivers activation and waiting for it to restart 
      win_reboot:
        msg: "Reboot initiated by Ansible"
        reboot_timeout: 2700 # 45mn
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"

# Waiting for HPE components to be installed (if any) after the first reboot 

    - name: Waiting for more HPE components to be installed... (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 10 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost
      when:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"
    
# If required, rebooting host a second time for the additional HPE drivers/firmware activations

    - name: Rebooting host again (if required) for the other HPE firmware and/or OS drivers activation and waiting for it to restart 
      win_reboot:
        msg: "Reboot initiated by Ansible"
        reboot_timeout: 1200 # 20mn
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"

# Waiting for HPE components to be installed (if any) after the second reboot (if any)

    - name: Waiting for SUT status after the second reboot (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 10 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost
      when:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"       

# Displaying the upgrade completion message 

    - name: Displaying message when components are already up-to-date
      debug: 
        msg: 
         - 'No upgrade is needed for {{ inventory_hostname }}'
         - 'HPE firmware and/or OS drivers from {{ synergy_service_pack_version }} are already installed and activated on the server'
         - 'The server has been placed out of maintenance'
      when: server_up_to_date is defined
              
    - name: Displaying upgrade completed successfully message
      debug: 
        msg: 
         - 'The upgrade was successfully completed on {{ inventory_hostname }}'
         - 'HPE firmware and/or OS drivers from {{ synergy_service_pack_version }} are installed and activated on the server'
         - 'The server has been placed out of maintenance'
      when: 
        - server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated"
        - server_up_to_date is not defined

    - name: Displaying upgrade error message
      debug: 
        msg: 
         - 'The upgrade ended with an error on {{ inventory_hostname }}'
         - "The installation state information of the firmware and/or OS drivers on the server is '{{ server_hardwares.serverSettings.firmwareAndDriversInstallState.installState }}'"
         - 'Check the OneView console for more information - The server has been kept in maintenance mode'
      when: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
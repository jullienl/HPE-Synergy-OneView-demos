---
# This playbook can be used to perform an automated installation/upgrade of HPE firmware and drivers on RHEL
#
# Supported with Synergy Gen10/Gen10+ servers
#
# Requirement: 
# - Synergy Service Package must be present in the HPE Oneview repository
# - AMS and iSUT packages must be present in the files/<RHEL_version> folder of the Ansible project
# - Server(s) must be under the control of a HPE OneView Server Profile
# - The SSH public key of the Ansible control node must be present in .ssh/authorized_keys on host(s) you wish to upgrade

# This playbook performs the following steps on each inventory host:
# - installs AMS/iSUT if they are not already installed
# - configures iSUT mode to allow OS driver updates via HPE OneView Server Profile
# - updates the OneView Server Profile to enable Firmware and OS Drivers upgrades using iSUT 
# - updates the OneView Server Profile to use the defined baseline
# - monitors the status of the upgrade process 
# - if required, reboots the RHEL host once or more times for HPE drivers/firmware activation 
# - displays an installation complete message once the server is back online

- name: Perform an automated installation/upgrade of HPE firmware and drivers on RHEL
  hosts: RHEL
  collections:
    - hpe.oneview
  gather_facts: no
  vars:
    # HPE Synergy Composer configuration
    - config: "{{ playbook_dir }}/oneview_config.json"

    # Folder located in <Ansible_project_dir>/files to store the RPM files
    # You can use the template name: RHEL_<version>.
    - rhel_version: "RHEL_8.3.0"
    # Minimum Packages required for automated drivers and Firmware installation
    - AMS_package: "amsd-2.5.0-1675.24.rhel8.x86_64.rpm"
    - iSUT_package: "sut-2.9.0-53.linux.x86_64.rpm"

    # Synergy Service Pack must be present in Oneview repository
    # - synergy_service_pack_version: "SY-2021.05.03"
    - synergy_service_pack_version: "SY-2021.11.01"

  tasks:

# Collecting facts on firmware baseline 
    - name: Gathering facts about Firmware bundles
      oneview_firmware_driver_facts:
        config: "{{ config }}"
      delegate_to: localhost

    # - debug: var=firmware_drivers

    - name: Capturing firmware bundle "{{ synergy_service_pack_version }}" uri
      set_fact:
        firmware_Baseline_Uri: "{{ (firmware_drivers | selectattr('version', 'equalto', synergy_service_pack_version) |  map(attribute='uri') | list)[0] }}"

    # - debug: var=firmware_Baseline_Uri

# Installing iSUT and AMS on the server for online installation of HPE drivers for RHEL

    - name: Copying HPE iSUT rpm file to {{ inventory_hostname }} if not present
      copy:
        src: files/{{ rhel_version }}/{{ iSUT_package }}
        dest: /tmp/sut.rpm
        mode: 0755
 
    - name: Copying HPE AMS rpm file to {{ inventory_hostname }} if not present
      copy:
        src: files/{{ rhel_version }}/{{ AMS_package }}
        dest: /tmp/amsd.rpm
        mode: 0755

    - name: Installing iSUT (if not installed)
      yum:
        name: /tmp/sut.rpm
        state: present
        disable_gpg_check: yes
      register: iSUT_install_status

    - debug: var=iSUT_install_status.msg   

    - name: Installing AMS (if not installed)
      yum:
        name: /tmp/amsd.rpm
        state: present
        disable_gpg_check: yes
      register: AMS_install_status

    - debug: var=AMS_install_status.msg
 
    - name: Waiting for iSUT installation to complete if running
      wait_for: 
        timeout: 60
      when: iSUT_install_status.changed == true
      delegate_to: localhost

    - name: Configuring iSUT mode to allow OS driver updates via HPE OneView Server Profile
      command: 
        sut -set mode=autodeployÂ 
        #sut -set mode=AutoDeployReboot
        #sut -set mode=AutoStage
        #sut -set mode=OnDemand
      register: sut_status

    - debug: msg="{{ sut_status.stdout }}"

# Changing the OneView Server Profile to enable OS drivers installation using the defined SSP/SPP.    

    - name: Updating Server Profile to enable Firmware and OS Drivers using SUT and defined baseline {{ synergy_service_pack_version }}
      oneview_server_profile:
        config: "{{ config }}"
        state: "present"
        data:
          name: "{{ inventory_hostname }}"
          firmware:
            firmwareInstallType: "FirmwareAndOSDrivers" 
            # firmwareInstallType: "FirmwareOnlyOfflineMode"
            firmwareBaselineUri: "{{ firmware_Baseline_Uri }}"
            # forceInstallFirmware: true

      delegate_to: localhost
      register: result

    - debug: msg="{{ result.msg }}"

# Waiting for HPE components to be installed (if any)

    - name: Waiting for HPE components to be staged and installed... (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 100
      delay: 30 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost

    - set_fact:
        server_up_to_date: true
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated"
      
# If required, rebooting host for the HPE drivers/firmware activation

    - name: Rebooting host (if required) for the HPE firmware and/or OS drivers activation and waiting for it to restart 
      reboot:
        msg: "Reboot initiated by Ansible"
        reboot_timeout: 2700 # 45mn
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"

# Waiting for HPE components to be installed (if any) after the first reboot 

    - name: Waiting for more HPE components to be installed... (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 10 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost
      when:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"
    
# If required, rebooting host a second time for the additional HPE drivers/firmware activations

    - name: Rebooting host again (if required) for the other HPE firmware and/or OS drivers activation and waiting for it to restart 
      reboot:
        msg: "Reboot initiated by Ansible"
        reboot_timeout: 1200 # 20mn
        pre_reboot_delay: 10
        post_reboot_delay: 30
      when: server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"

# Waiting for HPE components to be installed (if any) after the second reboot (if any)

    - name: Waiting for SUT status after the second reboot (if any)
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware.name }}"
      retries: 50
      delay: 10 
      until: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed")
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
      delegate_to: localhost
      when:  server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstalledPendingReboot"       

# Displaying the upgrade completion message 

    - name: Displaying message when components are already up-to-date
      debug: 
        msg: 
         - '{{ inventory_hostname }} upgrade not required !'
         - 'HPE firmware and/or OS drivers from {{ synergy_service_pack_version }} are already installed and activated on the server'
         - 'The server has been placed out of maintenance'
      when: server_up_to_date is defined
              
    - name: Displaying upgrade completed successfully message
      debug: 
        msg: 
         - '{{ inventory_hostname }} upgrade completed successfuly !'
         - 'HPE firmware and/or OS drivers from {{ synergy_service_pack_version }} are installed and activated on the server'
         - 'The server has been placed out of maintenance'
      when: 
        - server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "Activated"
        - server_up_to_date is not defined

    - name: Displaying upgrade error message
      debug: 
        msg: 
         - '{{ inventory_hostname }} upgrade failure !'
         - "The installation state information of the firmware and/or OS drivers on the server is '{{ server_hardwares.serverSettings.firmwareAndDriversInstallState.installState }}'"
         - 'Check the OneView console for more information - The server has been kept in maintenance mode'
      when: >
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "ActivateFailed") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "InstallFailed") 
        or 
        (server_hardwares.serverSettings.firmwareAndDriversInstallState.installState == "StageFailed")
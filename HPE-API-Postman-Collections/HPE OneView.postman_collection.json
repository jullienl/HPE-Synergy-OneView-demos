{
	"info": {
		"_postman_id": "525f7596-a659-556e-ea26-332682d540d2",
		"name": "HPE OneView",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Activity",
			"item": [
				{
					"name": "Get - Events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-profile-templates",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profile-templates"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get - Alerts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/alerts",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"alerts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - Alerts active from last month",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/alerts?filter=\"alertState EQ 'Active'\"&filter=\"created > 2021-09-25T15:45:50.122Z\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"alerts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"alertState EQ 'Active'\""
								},
								{
									"key": "filter",
									"value": "\"created > 2021-09-25T15:45:50.122Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - Alerts active between two dates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/alerts?filter=\"alertState EQ 'Active'\"&filter=\"created > 2021-09-25T15:45:50.122Z\"&filter=\"created < 2021-10-11T15:54:45.349Z\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"alerts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"alertState EQ 'Active'\""
								},
								{
									"key": "filter",
									"value": "\"created > 2021-09-25T15:45:50.122Z\""
								},
								{
									"key": "filter",
									"value": "\"created < 2021-10-11T15:54:45.349Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - Alerts non active older than 3 months",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/alerts?filter=\"alertState NE 'Active'\"&filter=\"created < 2021-07-13T15:45:50.122Z\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"alerts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"alertState NE 'Active'\""
								},
								{
									"key": "filter",
									"value": "\"created < 2021-07-13T15:45:50.122Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete - Alerts non active older than 3 months",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/alerts?filter=\"alertState NE 'Active'\"&filter=\"created < 2021-07-13T15:45:50.122Z\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"alerts"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"alertState NE 'Active'\""
								},
								{
									"key": "filter",
									"value": "\"created < 2021-07-13T15:45:50.122Z\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get - Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/tasks",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"tasks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Appliance",
			"item": [
				{
					"name": "Get Global Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/global-settings",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"global-settings"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Appliance Node Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/nodeinfo/status",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"nodeinfo",
								"status"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Appliance HA Node Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/ha-nodes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"ha-nodes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Appliance version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/nodeinfo/version",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"nodeinfo",
								"version"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Appliance Hardware configuration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/hw-appliances",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"hw-appliances"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Appliance Health status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/health-status",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"health-status"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Associations",
			"item": [
				{
					"name": "Rack Mount",
					"item": [
						{
							"name": "1- Login-sessions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
								},
								"url": {
									"raw": "https://{{composer}}/rest/login-sessions",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"login-sessions"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "2- Get-X-API-Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Get Fabric URI",
											"var xapiversion =  jsonData.currentVersion;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
											"",
											"//Display X-API-version in test results",
											"tests[\"X API version = \" + xapiversion ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/version",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"version"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "3- Get-Server-Hardware-ESX5-0-uri",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Get Server Hardware URI",
											"var shuri =  jsonData.members[0].uri;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"shuri\", shuri);",
											"",
											"//Display SH URI in test results",
											"tests[\"Server Hardware uri = \" + shuri ] = true; ",
											"",
											"//Get Server Hardware iLO IP",
											"var iloip =  jsonData.members[0].mpHostInfo.mpIpAddresses[0].address;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"iloip\", iloip);",
											"",
											"//Display SH URI in test results",
											"tests[\"Server Hardware iLO IP = \" + iloip ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{composer}}/rest/server-hardware?filter=\"name matches 'ESX5-0-ilo.etc.fr.comm.hpecorp.net'\"",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"server-hardware"
									],
									"query": [
										{
											"key": "filter",
											"value": "\"name matches 'ESX5-0-ilo.etc.fr.comm.hpecorp.net'\""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4- GET-Rack-URI-using-association",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//Get Rack URI\r",
											"var rackuri =  jsonData.members[0].parentUri;\r",
											"\r",
											"//Set environment variable\r",
											"postman.setEnvironmentVariable(\"rackuri\", rackuri);\r",
											"\r",
											"//Display Rack URI in test results\r",
											"tests[\"Rack uri = \" + rackuri ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/index/associations?childUri={{shuri}}&name=RACK_TO_PHYSICAL_DEVICE",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"index",
										"associations"
									],
									"query": [
										{
											"key": "childUri",
											"value": "{{shuri}}"
										},
										{
											"key": "name",
											"value": "RACK_TO_PHYSICAL_DEVICE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "5- GET-Rack-Ressource-Name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//Get Rack name\r",
											"var rackname =  jsonData.name;\r",
											"\r",
											"//Set environment variable\r",
											"postman.setEnvironmentVariable(\"rackname\", rackname);\r",
											"\r",
											"//Display Rack URI in test results\r",
											"tests[\"Rack name = \" + rackname ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/{{rackuri}}",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"{{rackuri}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Synergy Servers",
					"item": [
						{
							"name": "1- Login-sessions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
								},
								"url": {
									"raw": "https://{{composer}}/rest/login-sessions",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"login-sessions"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "2- Get-X-API-Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Get Fabric URI",
											"var xapiversion =  jsonData.currentVersion;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
											"",
											"//Display X-API-version in test results",
											"tests[\"X API version = \" + xapiversion ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/version",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"version"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "3- Get-SPT - ESXi 6.5U3 - Gen10 deployment with I3S",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Get SPT URI",
											"var spturi =  jsonData.members[0].uri;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"spturi\", spturi);",
											"",
											"//Display in test results",
											"tests[\"SPT uri = \" + spturi ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"password\",\r\n\"userName\":\"administrator\"\r\n}"
								},
								"url": {
									"raw": "https://{{composer}}/rest/server-profile-templates?filter=\"name matches 'ESXi 6.5U3 - Gen10 deployment with I3S'\"",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"server-profile-templates"
									],
									"query": [
										{
											"key": "filter",
											"value": "\"name matches 'ESXi 6.5U3 - Gen10 deployment with I3S'\""
										}
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "3- Get-SPT - Win2016 deployment with Streamer - Gen9",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"//Get SPT URI",
											"var spturi =  jsonData.members[0].uri;",
											"",
											"//Set environment variable",
											"postman.setEnvironmentVariable(\"spturi\", spturi);",
											"",
											"//Display in test results",
											"tests[\"SPT uri = \" + spturi ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"password\",\r\n\"userName\":\"administrator\"\r\n}"
								},
								"url": {
									"raw": "https://{{composer}}/rest/server-profile-templates?filter=\"name matches 'Win2016 deployment with Streamer - Gen9'\"",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"server-profile-templates"
									],
									"query": [
										{
											"key": "filter",
											"value": "\"name matches 'Win2016 deployment with Streamer - Gen9'\""
										}
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "4- Get-Enclosures",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);",
											"",
											"var enclosure = jsonData.members;",
											"var enclosurenumber = jsonData.total;",
											"",
											"//Get Enclosure URIs",
											"for (i = 0; i < enclosurenumber; ++i) {",
											"    //tests[\"Enclosure uri = \" + enclosure[i].uri] = true; ",
											"    var enclname = \"encl\" + (i+1);",
											"    //Set environment variable",
											"    postman.setEnvironmentVariable(enclname, enclosure[i].uri );",
											"    tests[enclname + \"= \" + enclosure[i].uri] = true; ",
											"    ",
											"}",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://{{composer}}/rest/enclosures",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"enclosures"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "5- GET-SPTtoSP-association Ressource",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//Get Child URIs\r",
											"\r",
											"var spttosp = jsonData.members;\r",
											"//Get the number of Server Profiles associated with the SPT\r",
											"var profilenumber = jsonData.total;\r",
											"\r",
											"//Display in test results\r",
											"tests[\"Number of SP associated with this SPT = \" + profilenumber ] = true; \r",
											"\r",
											"//Get Server Profile URIs\r",
											"var SP = [];\r",
											"for (i = 0; i < profilenumber; ++i) {\r",
											"    //tests[\"SP uri = \" + enclosure[i].uri] = true; \r",
											"    var profilename = \"Profile\" + (i+1);\r",
											"    //Set environment variable\r",
											"    postman.setEnvironmentVariable(profilename, spttosp[i].childuri );\r",
											"    tests[ profilename + \"= \" + spttosp[i].childUri ] = true; \r",
											"    \r",
											"}\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/index/associations?parentUri={{spturi}}&name=server_profile_template_to_server_profiles",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"index",
										"associations"
									],
									"query": [
										{
											"key": "parentUri",
											"value": "{{spturi}}"
										},
										{
											"key": "name",
											"value": "server_profile_template_to_server_profiles"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6- GET-First SP names associated with SPT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//Get the first Server Profile name associated with the SPT\r",
											"var SPname =  jsonData.members[0].name;\r",
											"\r",
											"//Display in test results\r",
											"tests[\"First Server Profile name associated with this SPT = \" + SPname ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/server-profiles?parentUri={{profile1}}",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"server-profiles"
									],
									"query": [
										{
											"key": "parentUri",
											"value": "{{profile1}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "7- GET-Second SP names associated with SPT",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody);\r",
											"\r",
											"//Get the first Server Profile name associated with the SPT\r",
											"var SPname =  jsonData.members[0].name;\r",
											"\r",
											"//Display in test results\r",
											"tests[\"First Server Profile name associated with this SPT = \" + SPname ] = true; "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/server-profiles?parentUri={{profile2}}",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"server-profiles"
									],
									"query": [
										{
											"key": "parentUri",
											"value": "{{profile2}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "6- GET-Enclosure-to-Server-hardware-association",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"type": "text",
										"value": "{{xapiversion}}"
									},
									{
										"key": "auth",
										"type": "text",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/index/associations?parentUri={{encl1}}&name=ENCLOSURE_TO_BLADE",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"index",
										"associations"
									],
									"query": [
										{
											"key": "parentUri",
											"value": "{{encl1}}"
										},
										{
											"key": "name",
											"value": "ENCLOSURE_TO_BLADE"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Labels",
			"item": [
				{
					"name": "Get-Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/labels",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"labels"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Indexes",
			"item": [
				{
					"name": "Get-X-API-Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var xapiversion =  jsonData.currentVersion;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
									"",
									"//Display X-API-version in test results",
									"tests[\"X API version = \" + xapiversion ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/version",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"version"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-SP - [ESX-1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get SP URI",
									"var spuri =  jsonData.members[0].uri;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"spuri\", spuri);",
									"",
									"//Display in test results",
									"tests[\"SPuri = \" + spuri ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/server-profiles?filter=\"name matches 'esx-1'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profiles"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"name matches 'esx-1'\""
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Index-resources - [ESX-1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/index/resources/{{spuri}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"index",
								"resources",
								"{{spuri}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Index-Trees - [Server_Profile esx-1]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "3000"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/index/trees/{{spuri}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"index",
								"trees",
								"{{spuri}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Network - [Prod-12]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Etherent-network URI",
									"var eneturi =  jsonData.members[0].uri;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"eneturi\", eneturi);",
									"",
									"//Display in test results",
									"tests[\"eneturi = \" + eneturi ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/ethernet-networks?filter=\"name matches 'prod-12'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"ethernet-networks"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"name matches 'prod-12'\""
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Index-resources - [Prod-12]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/index/resources/{{eneturi}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"index",
								"resources",
								"{{eneturi}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Index-Trees - [Ethernet_network prod-12]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "3000"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/index/trees/{{eneturi}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"index",
								"trees",
								"{{eneturi}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Backup",
			"item": [
				{
					"name": "Get-Backup",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/licenses",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"licenses"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Create-Backup",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");\r",
									"\r",
									"\r",
									"//Display Location value in test results\r",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; \r",
									"\r",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/backups",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"backups"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Task-object-Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "{{taskresult}}",
							"host": [
								"{{taskresult}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "eFuse",
			"item": [
				{
					"name": "1- Login-sessions",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true,
							"content-length": true,
							"host": true,
							"user-agent": true,
							"accept": true,
							"accept-encoding": true,
							"connection": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/login-sessions",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"login-sessions"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "2- Get-X-API-Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var xapiversion =  jsonData.currentVersion;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
									"",
									"//Display X-API-version in test results",
									"tests[\"X API version = \" + xapiversion ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/version",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"version"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Enclosures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var enclosure = jsonData.members;",
									"var enclosurenumber = jsonData.total;",
									"",
									"//Get Enclosure URIs",
									"var encl = [];",
									"for (i = 0; i < enclosurenumber; ++i) {",
									"    //tests[\"Enclosure uri = \" + enclosure[i].uri] = true; ",
									"    var enclname = \"encl\" + (i+1);",
									"    //Set environment variable",
									"    postman.setEnvironmentVariable(enclname, enclosure[i].uri );",
									"    tests[enclname + \"= \" + enclosure[i].uri] = true; ",
									"    ",
									"}",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "auth",
								"type": "text",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"password\",\r\n\"userName\":\"administrator\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/enclosures",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"enclosures"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Efuse-Encl1-Compute-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/deviceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl1-Interconnect-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/interconnectBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl1-Appliance-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/applianceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl1-Manager-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/managerBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl2-Compute-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/deviceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl2}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl2-Interconnect-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/interconnectBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl2}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl2-Appliance-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/applianceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl2}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl2-Manager-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/managerBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl2}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl2}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl3-Compute-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/deviceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl3}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl3-Interconnect-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/interconnectBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl3}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl3-Appliance-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/applianceBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl3}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl3}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Efuse-Encl3-Manager-Bay1",
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[{\"op\":\"replace\",\"path\":\"/managerBays/1/bayPowerState\",\"value\":\"E-Fuse\"}] \r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{encl3}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{encl3}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Enclosures",
			"item": [
				{
					"name": "Get-Enclosures",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"// Get Enclousre URI\r",
									"for (count = 0; count < jsonData.members.length; count++)\r",
									"    {\r",
									"            var enclosure = jsonData.members[count]\r",
									"            \r",
									"            var enclosuretname =  enclosure.name ;\r",
									"            var enclosureuri =  enclosure.uri;\r",
									"            var enclosureserialNumber =  enclosure.serialNumber;\r",
									"            tests[\"SN: \"+ enclosureserialNumber + \" - Name: \" + enclosuretname + \" - URI: \" + enclosureuri] = true;  \r",
									"                 \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/enclosures/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"enclosures",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Enclosures - FLM IPv6 LL Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"// Get Enclousre URI\r",
									"for (count = 0; count < jsonData.members.length; count++)\r",
									"    {\r",
									"            var enclosure = jsonData.members[count]\r",
									"            \r",
									"            var enclosuretname =  enclosure.name ;\r",
									"            var enclosureuri =  enclosure.uri;\r",
									"            var enclosureserialNumber =  enclosure.serialNumber;\r",
									"            tests[\"SN: \"+ enclosureserialNumber + \" - Name: \" + enclosuretname + \" - URI: \" + enclosureuri] = true;  \r",
									"            \r",
									"            for (flmcount = 0; flmcount < enclosure.managerBays.length; flmcount++)\r",
									"            {\r",
									"                var flm = enclosure.managerBays[flmcount];\r",
									"                var flmmodel = flm.model;\r",
									"                var flmIPv6 = flm.ipAddress;\r",
									"                \r",
									"                tests[\" - \" + flmmodel + \" - IPv6: \" + flmIPv6] = true;  \r",
									"\r",
									"            }       \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/enclosures/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"enclosures",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Enclosures - Appliance IPv6 LL Addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"\r",
									"var jsonData = JSON.parse(responseBody);\r",
									"// Get Enclousre URI\r",
									"for (count = 0; count < jsonData.members.length; count++)\r",
									"    {\r",
									"            var enclosure = jsonData.members[count]\r",
									"            \r",
									"            var enclosuretname =  enclosure.name ;\r",
									"            var enclosureuri =  enclosure.uri;\r",
									"            var enclosureserialNumber =  enclosure.serialNumber;\r",
									"            tests[\"SN: \"+ enclosureserialNumber + \" - Name: \" + enclosuretname + \" - URI: \" + enclosureuri] = true;  \r",
									"            \r",
									"            for (appliancecount = 0; appliancecount < enclosure.applianceBays.length; appliancecount++)\r",
									"            {\r",
									"                var appliance = enclosure.applianceBays[appliancecount];\r",
									"                var appliancemodel = appliance.model;\r",
									"                var applianceSN = appliance.serialNumber;\r",
									"                \r",
									"                tests[\" - \" + appliancemodel + \" - SN: \" + applianceSN] = true;  \r",
									"\r",
									"            }       \r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/enclosures/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"enclosures",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Ethernet networks",
			"item": [
				{
					"name": "Ethernet-Networks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/ethernet-networks",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"ethernet-networks"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "FW Bundle",
			"item": [
				{
					"name": "Get FW Drivers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/firmware-drivers",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"firmware-drivers"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Logical Interconnect Group",
			"item": [
				{
					"name": "Get-Logical-Interconnect-Group",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/logical-interconnect-groups/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"logical-interconnect-groups",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST LIG",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var xapiversion =  jsonData.currentVersion;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
									"",
									"//Display X-API-version in test results",
									"tests[\"X API version = \" + xapiversion ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "1600"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"enclosureIndexes\": [\r\n1,\r\n2,\r\n3\r\n],\r\n\"ethernetSettings\": {\r\n\"enableFastMacCacheFailover\": true,\r\n\"enableNetworkLoopProtection\": true,\r\n\"enablePauseFloodProtection\": false,\r\n\"macRefreshInterval\": 5,\r\n\"type\": \"EthernetInterconnectSettingsV7\"\r\n},\r\n\"interconnectBaySet\": 3,\r\n\"interconnectMapTemplate\": {\r\n\"interconnectMapEntryTemplates\": [\r\n{\r\n\"enclosureIndex\": 1,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 1,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/890eb49a-5c92-4639-a678-1cb874dbba1b\"\r\n},\r\n{\r\n\"enclosureIndex\": 3,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/84f3bcd5-c412-4174-aa04-bf22e5bc1d60\"\r\n},\r\n{\r\n\"enclosureIndex\": 3,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/84f3bcd5-c412-4174-aa04-bf22e5bc1d60\"\r\n},\r\n{\r\n\"enclosureIndex\": 2,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 2,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/890eb49a-5c92-4639-a678-1cb874dbba1b\"\r\n},\r\n{\r\n\"enclosureIndex\": 1,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 1,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/84f3bcd5-c412-4174-aa04-bf22e5bc1d60\"\r\n},\r\n{\r\n\"enclosureIndex\": 2,\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 2,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n}\r\n]\r\n},\r\n\"permittedInterconnectTypeUri\": \"/rest/interconnect-types/84f3bcd5-c412-4174-aa04-bf22e5bc1d60\"\r\n}\r\n]\r\n},\r\n\"name\": \"LIG-FlexFabric\",\r\n\"qosConfiguration\": {\r\n\"activeQosConfig\": {\r\n\"configType\": \"Passthrough\",\r\n\"qosTrafficClassifiers\": [],\r\n\"type\": \"QosConfiguration\"\r\n},\r\n\"type\": \"qos-aggregated-configuration\"\r\n},\r\n\"redundancyType\": \"HighlyAvailable\",\r\n\"snmpConfiguration\": {\r\n\"type\": \"snmp-configuration\",\r\n\"v3Enabled\": true\r\n},\r\n\"telemetryConfiguration\": {\r\n\"enableTelemetry\": true,\r\n\"sampleCount\": 12,\r\n\"sampleInterval\": 300,\r\n\"type\": \"CanonicalTelemetryConfiguration\"\r\n},\r\n\"type\": \"logical-interconnect-groupV8\",\r\n\"uplinkSets\": [\r\n{\r\n\"ethernetNetworkType\": \"Tagged\",\r\n\"lacpTimer\": \"Short\",\r\n\"logicalPortConfigInfos\": [\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 2,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 63,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n},\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 1,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 63,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"mode\": \"Auto\",\r\n\"name\": \"Mgmt\",\r\n\"networkType\": \"Ethernet\",\r\n\"networkUris\": [\r\n\"/rest/ethernet-networks/6f9cbcd4-06c3-46cb-94da-f6bd337b9553\"\r\n]\r\n},\r\n{\r\n\"ethernetNetworkType\": \"Tagged\",\r\n\"lacpTimer\": \"Short\",\r\n\"logicalPortConfigInfos\": [\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 1,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 65,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n},\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 2,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 65,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"mode\": \"Auto\",\r\n\"name\": \"Prod\",\r\n\"networkType\": \"Ethernet\",\r\n\"networkUris\": [\r\n\"/rest/ethernet-networks/2c902e47-3221-42bd-8614-746cd3ea6910\",\r\n\"/rest/ethernet-networks/7bb7461b-c770-4e9b-a4fe-b9e339a9fffb\",\r\n\"/rest/ethernet-networks/8f38ae69-8d67-42c9-a07c-9335282b1255\",\r\n\"/rest/ethernet-networks/e9a5d204-f6c2-4baf-81a1-effc20571532\",\r\n\"/rest/ethernet-networks/20d425e2-57ec-4c99-bfd4-3e56ca4db742\",\r\n\"/rest/ethernet-networks/ee870312-603e-4f4d-888a-8db0a89e0e5c\",\r\n\"/rest/ethernet-networks/30f20780-b5bf-4848-8d0b-b3c6e4db85a2\",\r\n\"/rest/ethernet-networks/736ce75d-3c0d-4567-9155-72c112a0a194\",\r\n\"/rest/ethernet-networks/8d0e6475-d7c7-4add-90a8-0f4e3b56b086\",\r\n\"/rest/ethernet-networks/78457b57-b498-401c-b7f9-1e279bc2bd20\",\r\n\"/rest/ethernet-networks/51c9fbf6-08c4-43c4-aad6-de59a04e4c63\",\r\n\"/rest/ethernet-networks/dd9de825-0d70-4493-865b-f6bd43a70666\"\r\n]\r\n},\r\n{\r\n\"ethernetNetworkType\": \"NotApplicable\",\r\n\"logicalPortConfigInfos\": [\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 2,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 6,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 67,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"mode\": \"Auto\",\r\n\"name\": \"SAN-B-FC\",\r\n\"networkType\": \"FibreChannel\",\r\n\"networkUris\": [\r\n\"/rest/fc-networks/082554c7-845a-4222-93ac-75235e737770\"\r\n]\r\n},\r\n{\r\n\"ethernetNetworkType\": \"NotApplicable\",\r\n\"logicalPortConfigInfos\": [\r\n{\r\n\"desiredSpeed\": \"Auto\",\r\n\"logicalLocation\": {\r\n\"locationEntries\": [\r\n{\r\n\"relativeValue\": 1,\r\n\"type\": \"Enclosure\"\r\n},\r\n{\r\n\"relativeValue\": 3,\r\n\"type\": \"Bay\"\r\n},\r\n{\r\n\"relativeValue\": 67,\r\n\"type\": \"Port\"\r\n}\r\n]\r\n}\r\n}\r\n],\r\n\"mode\": \"Auto\",\r\n\"name\": \"SAN-A-FC\",\r\n\"networkType\": \"FibreChannel\",\r\n\"networkUris\": [\r\n\"/rest/fc-networks/d9c4dc04-c994-422b-8e96-4f203ebf0236\"\r\n]\r\n}\r\n],\r\n\"uri\": \"/rest/logical-interconnect-groups/1e401c4c-67f8-4fbd-a0a6-e1591ac03ced\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/logical-interconnect-groups/098a98f5-4891-4987-ad7d-9296ca37c7c0",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"logical-interconnect-groups",
								"098a98f5-4891-4987-ad7d-9296ca37c7c0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Logical Interconnect",
			"item": [
				{
					"name": "Logical Interconnect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/logical-interconnects",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"logical-interconnects"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Logical Interconnect CAM Table",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{liuri}}/forwarding-information-base",
							"protocol": "https",
							"host": [
								"{{composer}}{{liuri}}"
							],
							"path": [
								"forwarding-information-base"
							]
						},
						"description": "Gets the forwarding information base data for a logical interconnect. \r\nMaximum of 100 entries is returned. \r\nOptional filtering criteria may be specified using supported attributes: interconnectUri, macAddress, internalVlan, externalVlan, and supported relation = (Equals). macAddress is 12 hexadecimal digits with a colon between each pair of digits (upper or lower case)."
					},
					"response": []
				},
				{
					"name": "Logical Interconnect Ethernet Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{liuri}}/ethernetSettings",
							"protocol": "https",
							"host": [
								"{{composer}}{{liuri}}"
							],
							"path": [
								"ethernetSettings"
							]
						},
						"description": "Gets the forwarding information base data for a logical interconnect. \r\nMaximum of 100 entries is returned. \r\nOptional filtering criteria may be specified using supported attributes: interconnectUri, macAddress, internalVlan, externalVlan, and supported relation = (Equals). macAddress is 12 hexadecimal digits with a colon between each pair of digits (upper or lower case)."
					},
					"response": []
				},
				{
					"name": "Logical Interconnect IGMP Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{liuri}}/igmpSettings",
							"protocol": "https",
							"host": [
								"{{composer}}{{liuri}}"
							],
							"path": [
								"igmpSettings"
							]
						},
						"description": "Gets the forwarding information base data for a logical interconnect. \r\nMaximum of 100 entries is returned. \r\nOptional filtering criteria may be specified using supported attributes: interconnectUri, macAddress, internalVlan, externalVlan, and supported relation = (Equals). macAddress is 12 hexadecimal digits with a colon between each pair of digits (upper or lower case)."
					},
					"response": []
				},
				{
					"name": "Logical Interconnect Internal VLANs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{liuri}}/internalVlans",
							"protocol": "https",
							"host": [
								"{{composer}}{{liuri}}"
							],
							"path": [
								"internalVlans"
							]
						},
						"description": "Gets the forwarding information base data for a logical interconnect. \r\nMaximum of 100 entries is returned. \r\nOptional filtering criteria may be specified using supported attributes: interconnectUri, macAddress, internalVlan, externalVlan, and supported relation = (Equals). macAddress is 12 hexadecimal digits with a colon between each pair of digits (upper or lower case)."
					},
					"response": []
				}
			]
		},
		{
			"name": "Logs",
			"item": [
				{
					"name": "Get-Audit-Logs",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/audit-logs?start=0&count=150&filter=\"date>='2019-04-01'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"audit-logs"
							],
							"query": [
								{
									"key": "start",
									"value": "0"
								},
								{
									"key": "count",
									"value": "150"
								},
								{
									"key": "filter",
									"value": "\"date>='2019-04-01'\""
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Audit-Logs Settings",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/audit-logs/settings",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"audit-logs",
								"settings"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Set-Audit-Logs Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "If-Match",
								"value": "\"2019-12-10T10:05:22Z\"",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"LogForwardingSettingsDto\",\r\n    \"uri\": \"/rest/audit-logs/settings\",\r\n    \"category\": \"audit-logs\",\r\n    \"forwardingType\": \"rsyslogd\",\r\n    \"forwardingEnabled\": true,\r\n    \"remoteDestinations\": [\r\n        {\r\n            \"remoteDestination\": \"10.0.0.9\",\r\n            \"remotePort\": \"514\"\r\n        }\r\n    ]\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/audit-logs/settings",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"audit-logs",
								"settings"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Reset-Audit-Logs Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "If-Match",
								"type": "text",
								"value": "\"2019-12-10T10:05:22Z\""
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"type\": \"LogForwardingSettingsDto\",\r\n    \"uri\": \"/rest/audit-logs/settings\",\r\n    \"category\": \"audit-logs\",\r\n    \"forwardingType\": \"rsyslogd\",\r\n    \"forwardingEnabled\": false,\r\n    \"remoteDestinations\": [\r\n            ]\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/audit-logs/settings",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"audit-logs",
								"settings"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Remote-Syslog Settings",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/remote-syslog",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"remote-syslog"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Set-Remote-Syslog Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n   \"type\": \"RemoteSyslog\",\r\n   \"sendTestLog\": false,\r\n   \"remoteSyslogPort\": \"514\",\r\n   \"remoteSyslogDestination\": \"15.146.158.242\",\r\n   \"enabled\": true\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/remote-syslog",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"remote-syslog"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Reset-Remote-Syslog Settings",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n   \"type\": \"RemoteSyslog\",\r\n   \"sendTestLog\": false,\r\n   \"remoteSyslogPort\": \"\",\r\n   \"remoteSyslogDestination\": \"\",\r\n   \"enabled\": false\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/remote-syslog",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"remote-syslog"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Interconnect",
			"item": [
				{
					"name": "Get-Interconnect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"// Get Interconnect URI\r",
									"for (count = 0; count < jsonData.members.length; count++)\r",
									"\t{\r",
									"\t    if (jsonData.members[count].model == \"Virtual Connect SE 40Gb F8 Module for Synergy\")\r",
									"\t    {\r",
									"\t        \r",
									"            var interconnectname =  \"VC-\" + jsonData.members[count].name.replace(/ /g,'').replace(/,/g, '-') + \"_uri\";\r",
									"            var interconnect_uri =  jsonData.members[count].uri;\r",
									"\t        postman.setEnvironmentVariable(interconnectname, interconnect_uri);\r",
									"\t        tests[interconnectname + \"= \" + jsonData.members[count].uri] = true;  \r",
									"\t    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/interconnects/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"interconnects",
								""
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": " Get-interconnect VC40G Frame1-bay3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"// Get Q4:1 Port URI\r",
									"for (count = 0; count < jsonData.ports.length; count++)\r",
									"\t{\r",
									"\t    if (jsonData.ports[count].portName == \"Q4:1\")\r",
									"\t    {\r",
									"\t        var portname = jsonData.ports[count].interconnectName.replace(/ /g,'').replace(/,/g, '-') + \"-\" + jsonData.ports[count].portName\r",
									"            var port_uri =  jsonData.ports[count].uri;\r",
									"\t        postman.setEnvironmentVariable(portname, port_uri);\r",
									"\t        tests[portname + \"= \" + port_uri] = true;  \r",
									"\t    }\r",
									"}\r",
									"\r",
									"// Get Q1 Port URI\r",
									"for (count = 0; count < jsonData.ports.length; count++)\r",
									"\t{\r",
									"\t    if (jsonData.ports[count].portName == \"Q1\")\r",
									"\t    {\r",
									"\t        var portname = jsonData.ports[count].interconnectName.replace(/ /g,'').replace(/,/g, '-') + \"-\" + jsonData.ports[count].portName\r",
									"            var port_uri =  jsonData.ports[count].uri;\r",
									"\t        postman.setEnvironmentVariable(portname, port_uri);\r",
									"\t        tests[portname + \"= \" + port_uri] = true;  \r",
									"\t    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH-interconnect VC40G Frame1-bay3-Set-Netop-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"path\":  \"/netOpPasswd\",\r\n        \"op\":  \"replace\",\r\n        \"value\":  \"netoppwd\"\r\n    }\r\n]\r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-interconnect VC40G Frame2-bay6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"// Get Q4:1 Port URI\r",
									"for (count = 0; count < jsonData.ports.length; count++)\r",
									"\t{\r",
									"\t    if (jsonData.ports[count].portName == \"Q4:1\")\r",
									"\t    {\r",
									"\t        var portname = jsonData.ports[count].interconnectName.replace(/ /g,'').replace(/,/g, '-') + \"-\" + jsonData.ports[count].portName\r",
									"            var port_uri =  jsonData.ports[count].uri;\r",
									"\t        postman.setEnvironmentVariable(portname, port_uri);\r",
									"\t        tests[portname + \"= \" + port_uri] = true;  \r",
									"\t    }\r",
									"}\r",
									"\r",
									"// Get Q1 Port URI\r",
									"for (count = 0; count < jsonData.ports.length; count++)\r",
									"\t{\r",
									"\t    if (jsonData.ports[count].portName == \"Q1\")\r",
									"\t    {\r",
									"\t        var portname = jsonData.ports[count].interconnectName.replace(/ /g,'').replace(/,/g, '-') + \"-\" + jsonData.ports[count].portName\r",
									"            var port_uri =  jsonData.ports[count].uri;\r",
									"\t        postman.setEnvironmentVariable(portname, port_uri);\r",
									"\t        tests[portname + \"= \" + port_uri] = true;  \r",
									"\t    }\r",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH-interconnect VC40G Frame2-bay6-Set-Netop-user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"path\":  \"/netOpPasswd\",\r\n        \"op\":  \"replace\",\r\n        \"value\":  \"netoppwd\"\r\n    }\r\n]\r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PATCH-Factory reset and reapply previous configuration - interconnect VC F2-b6 -",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"path\":  \"/factoryResetState\",\r\n        \"op\":  \"replace\",\r\n        \"value\":  \"ReapplyConfiguration\"\r\n    }\r\n]\r\n"
						},
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-FC Port Q4:1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Operational Speed = \" + jsonData.operationalSpeed] = true;  \r",
									"\r",
									"tests[\"Connector Type = \" + jsonData.connectorType] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.remoteSystemName] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.remoteSystemName] = true; \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame1-interconnect3-Q4:1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame1-interconnect3-Q4:1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-FC Port Q4:1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Operational Speed = \" + jsonData.operationalSpeed] = true;  \r",
									"\r",
									"tests[\"Connector Type = \" + jsonData.connectorType] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.remoteSystemName] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.remoteSystemName] = true; \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame2-interconnect6-Q4:1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame2-interconnect6-Q4:1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-FC Port Q4:1 Logins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Number of FC logins = \" + jsonData.fcPortProperties.loginsCount] = true;  \r",
									"\r",
									"tests[\"FC logins = \" + jsonData.fcPortProperties.logins] = true;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame1-interconnect3-Q4:1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame1-interconnect3-Q4:1}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-FC Port Q4:1 Logins",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Number of FC logins = \" + jsonData.fcPortProperties.loginsCount] = true;  \r",
									"\r",
									"tests[\"FC logins = \" + jsonData.fcPortProperties.logins] = true;  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame2-interconnect6-Q4:1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame2-interconnect6-Q4:1}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-port Q1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Operational Speed = \" + jsonData.operationalSpeed] = true;  \r",
									"\r",
									"tests[\"Connector Type = \" + jsonData.connectorType] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.neighbor.remoteSystemName] = true;  \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame1-interconnect3-Q1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame1-interconnect3-Q1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-port Q1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"tests[\"Operational Speed = \" + jsonData.operationalSpeed] = true;  \r",
									"\r",
									"tests[\"Connector Type = \" + jsonData.connectorType] = true;  \r",
									"\r",
									"tests[\"Remote System Name = \" + jsonData.neighbor.remoteSystemName] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{Frame2-interconnect6-Q1}}",
							"protocol": "https",
							"host": [
								"{{composer}}{{Frame2-interconnect6-Q1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/statistics",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-Port Q1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/statistics/q1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"statistics",
								"q1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-Port d1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/statistics/d1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"statistics",
								"d1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-Port d1-Subport 1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/statistics/d1/subport/1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"statistics",
								"d1",
								"subport",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame1-Bay3-Port d1-Subport 2 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"//tests[\"Operational Speed = \" + jsonData.operationalSpeed] = true;  \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/statistics/d1/subport/2",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"statistics",
								"d1",
								"subport",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/statistics",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"statistics"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-Port Q1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/statistics/q1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"statistics",
								"q1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-Port d1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/statistics/d1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"statistics",
								"d1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-Port d1-Subport 1 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/statistics/d1/subport/1",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"statistics",
								"d1",
								"subport",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Interconnect VC40G Frame2-Bay6-Port d1-Subport 2 Statistics",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/statistics/d1/subport/2",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"statistics",
								"d1",
								"subport",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-interconnect VC40G Frame1-bay3 cpu and memory Utilization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame1-interconnect3_uri}}/utilization",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame1-interconnect3_uri}}"
							],
							"path": [
								"utilization"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-interconnect VC40G Frame2-bay6 cpu and memory Utilization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{VC-Frame2-interconnect6_uri}}/utilization",
							"protocol": "https",
							"host": [
								"{{composer}}{{VC-Frame2-interconnect6_uri}}"
							],
							"path": [
								"utilization"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reserved VLAN range",
			"item": [
				{
					"name": "1- Login-sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/login-sessions",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"login-sessions"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "2- Get-X-API-Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var xapiversion =  jsonData.currentVersion;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
									"",
									"//Display X-API-version in test results",
									"tests[\"X API version = \" + xapiversion ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/version",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"version"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Reserved-VLAN-range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// see https://{{composer}}/api-docs/current/#rest/fabrics",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var fabricid =  jsonData.members[0].uri;",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"fabricid\", fabricid);",
									"//Display Fabrci URI in test results",
									"pm.test(\"Fabric URI = \" + fabricid + \" saved in 'fabricid' environment variable\"); ",
									"",
									"//Set variables",
									"var Fabricname =  jsonData.members;",
									"var reservedVlanRange =  jsonData.members[0].reservedVlanRange;",
									"",
									"//Display content of variables in test results",
									"pm.test(\"Fabric Name = \" + Fabricname[0].name);",
									"pm.test(\"Reserved Vlan Range starts at VLAN \" + reservedVlanRange.start); ",
									"pm.test(\"Reserved Vlan Range length = \" + reservedVlanRange.length + \" VLANs\"); ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/fabrics/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"fabrics",
								""
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "4- Get-Logical-Interconnect",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Logical Interconnect URI",
									"var LIid =  jsonData.members[0].uri;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"LIid\", LIid);",
									"",
									"//Display LI URI in test results",
									"tests[\"LI URI = \" + LIid + \" saved in 'LIid' environment variable\"] = true; ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/logical-interconnects/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"logical-interconnects",
								""
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "5- Get-Internal VLANs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Members",
									"var members = jsonData.members;",
									"",
									"//Get the number of internal VLANs",
									"var internalVLANnumber = jsonData.total;",
									"",
									"//Display in test results",
									"pm.test(\"Number of internal VLANs = \" + internalVLANnumber);",
									"",
									"// Get Env variables",
									"var composer = pm.variables.get(\"composer\");",
									"var sessionID = pm.variables.get(\"sessionID\");",
									"",
									"//Get internal VLAN URIs",
									"",
									"(async()=>{",
									"    for (i = 0; i < internalVLANnumber; i++) {",
									"",
									"        var NetworkUri = members[i].generalNetworkUri",
									"        var internalVlanId = members[i].internalVlanId",
									"        var url = 'https://' + composer + NetworkUri",
									"        //pm.test(\"webrequest URL = \" + url);",
									"        //pm.test(\"Internal VLAN ID = \" + internalVlanId);",
									"",
									"        pm.sendRequest({",
									"            url: url,",
									"            method: 'GET',",
									"            header: {",
									"                'Content-Type': 'application/json',",
									"                'Auth': sessionID,",
									"            },",
									"            body: {}",
									"        },",
									"        function (err, res) {",
									"            if (err) {",
									"                console.log(err);",
									"            } else {",
									"            ",
									"            console.log(res.json());",
									"            pm.test(\" - Name = \" + res.json().name + \" - Internal VLAN ID = \" + internalVlanId);",
									"            ",
									"            }",
									"        });",
									"    ",
									"        await sleep(200)",
									"    }",
									"})()",
									"",
									"function sleep(ms) {",
									"    return new Promise(resolve => setTimeout(resolve, ms));",
									"}",
									"",
									"setTimeout(()=>{},15000)",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{LIid}}/internalVlans",
							"protocol": "https",
							"host": [
								"{{composer}}{{LIid}}"
							],
							"path": [
								"internalVlans"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "4- Put-Change-Reserved-VLAN-range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");",
									"",
									"",
									"//Display Location value in test results",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; ",
									"",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n   \"start\": 3968,\r\n\t\"length\": 127,\r\n    \"type\": \"vlan-pool\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/{{fabricid}}/reserved-vlan-range",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{fabricid}}",
								"reserved-vlan-range"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "5- Get-Task-object-Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{composer}}/{{taskresult}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{taskresult}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "6- Get-New-Reserved-VLAN-range",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{composer}}/{{fabricid}}/reserved-vlan-range",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{fabricid}}",
								"reserved-vlan-range"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Scopes",
			"item": [
				{
					"name": "Get-Scopes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/network-interfaces",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"network-interfaces"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/labels",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"labels"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Labels 3 resources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/labels/resources/rest/server-hardware/39313738-3034-5A43-3231-32343036474A",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"labels",
								"resources",
								"rest",
								"server-hardware",
								"39313738-3034-5A43-3231-32343036474A"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Second network interface (only for VM appliance)",
			"item": [
				{
					"name": "Get-Network-Interface",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/network-interfaces",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"network-interfaces"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Configure-Second-Network-Interface-STATIC",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");",
									"",
									"",
									"//Display Location value in test results",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; ",
									"",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applianceNetworks\": [\r\n        {\r\n            \"interfaceName\": \"WAN_interface\",\r\n            \"device\": \"eth1\",\r\n            \"macAddress\": \"00:50:56:ac:d8:68\",\r\n            \"ipv4Type\": \"STATIC\",\r\n            \"ipv6Type\": \"UNCONFIGURE\",\r\n            \"overrideIpv4DhcpDnsServers\": false,\r\n            \"overrideIpv6DhcpDnsServers\": false,\r\n            \"confOneNode\": true,\r\n            \"activeNode\": 1,\r\n            \"hostname\": null,\r\n            \"app1Ipv4Addr\": \"xxx.xxx.xxx.xxx\",\r\n            \"app2Ipv4Addr\": \"\",\r\n            \"virtIpv4Addr\": null,\r\n            \"ipv4Subnet\": \"255.255.255.0\",\r\n            \"ipv4Gateway\": \"xxx.xxx.xxx.xxx\",\r\n            \"app1Ipv6Addr\": \"\",\r\n            \"app2Ipv6Addr\": \"\",\r\n            \"virtIpv6Addr\": null,\r\n            \"ipv6Subnet\": \"\",\r\n            \"ipv6Gateway\": \"\",\r\n            \"app1Ipv4Alias\": null,\r\n            \"app2Ipv4Alias\": null,\r\n            \"app1Ipv6Alias\": null,\r\n            \"app2Ipv6Alias\": null,\r\n            \"domainName\": null,\r\n            \"searchDomains\": [],\r\n            \"ipv4NameServers\": [\r\n                \"192.168.2.1\",\r\n                \"192.168.2.3\"\r\n            ],\r\n            \"ipv6NameServers\": [],\r\n            \"bondedTo\": null,\r\n            \"unconfigure\": false,\r\n            \"aliasDisabled\": false\r\n        }\r\n\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{composer}}/rest/appliance/network-interfaces",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"network-interfaces"
							]
						},
						"description": "You must provide in your payload only the new interface configuration details like in my example below. \r\n \r\nImportant note, you must provide the ipv4NameServers information of your existing first interface like included below: \"192.168.2.1\", \"192.168.2.3\". If you don't do that, the DNS entries will be removed from the appliance during the POST.\r\n \r\nThe response returned should be 200 OK. \r\n \r\nMake sure you check the status of the task generated by your POST (the task URI is returned in the Location response header) : taskState should be Completed and taskStatus Succeeded."
					},
					"response": []
				},
				{
					"name": "Configure-Second-Network-Interface -DHCP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");",
									"",
									"",
									"//Display Location value in test results",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; ",
									"",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"applianceNetworks\": [\r\n        {\r\n            \"interfaceName\": \"WAN_interface\",\r\n            \"device\": \"eth1\",\r\n            \"macAddress\": \"00:50:56:ac:d8:68\",\r\n            \"ipv4Type\": \"DHCP\",\r\n            \"ipv6Type\": \"UNCONFIGURE\",\r\n            \"overrideIpv4DhcpDnsServers\": false,\r\n            \"overrideIpv6DhcpDnsServers\": false,\r\n            \"confOneNode\": true,\r\n            \"activeNode\": 1,\r\n            \"hostname\": \"OneView.com\",\r\n            \"app2Ipv4Addr\": \"\",\r\n            \"virtIpv4Addr\": null,\r\n            \"app1Ipv6Addr\": \"\",\r\n            \"app2Ipv6Addr\": \"\",\r\n            \"virtIpv6Addr\": null,\r\n            \"ipv6Subnet\": \"\",\r\n            \"ipv6Gateway\": \"\",\r\n            \"app1Ipv4Alias\": null,\r\n            \"app2Ipv4Alias\": null,\r\n            \"app1Ipv6Alias\": null,\r\n            \"app2Ipv6Alias\": null,\r\n            \"domainName\": null,\r\n            \"searchDomains\": [],\r\n            \"ipv4NameServers\": [\r\n                \"192.168.2.1\",\r\n                \"192.168.2.3\"\r\n            ],\r\n            \"ipv6NameServers\": [],\r\n            \"bondedTo\": null,\r\n            \"unconfigure\": false,\r\n            \"aliasDisabled\": false\r\n        }\r\n\r\n    ]\r\n}\r\n"
						},
						"url": {
							"raw": "https://{{composer}}/rest/appliance/network-interfaces",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"network-interfaces"
							]
						},
						"description": "You must provide in your payload only the new interface configuration details like in my example below. \r\n \r\nImportant note, you must provide the ipv4NameServers information of your existing first interface like included below: \"192.168.2.1\", \"192.168.2.3\". If you don't do that, the DNS entries will be removed from the appliance during the POST.\r\n \r\nThe response returned should be 200 OK. \r\n \r\nMake sure you check the status of the task generated by your POST (the task URI is returned in the Location response header) : taskState should be Completed and taskStatus Succeeded."
					},
					"response": []
				},
				{
					"name": "Get-Task-object-Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{composer}}/{{taskresult}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{taskresult}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Static-routes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/appliance/static-routes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"static-routes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Configure-Static-Routes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");",
									"",
									"",
									"//Display Location value in test results",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; ",
									"",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"destination\": \"172.28.0.0/16\",\r\n\"gateway\": \"172.16.14.1\",\r\n\"interface\": \"Name_Canbeanything\",\r\n\"metric\": \"100\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/appliance/static-routes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"static-routes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Security",
			"item": [
				{
					"name": "Certificates",
					"item": [
						{
							"name": "Get-Client SSL certificates",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"// Display client certificates ",
											"for (count = 0; count < jsonData.members.length; count++)",
											"    {",
											"       ",
											"            var certificate_name = jsonData.members[count].certDetails.commonName;",
											"            var certificate_issuer =  jsonData.members[count].certDetails.issuer;",
											"            var certificate_aliasname = jsonData.members[count].aliasName",
											"            tests[\"Name: \" + certificate_name + \" -- Issuer=\" + certificate_issuer + \" -- Alias name=\" + certificate_aliasname ] = true;  ",
											"              ",
											"    }",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										""
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Get-SSL CA certificates - Tests displays Root and Leaf",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var jsonData = JSON.parse(responseBody);",
											"",
											"tests[jsonData.members.length + \" certificates found!\" ] = true; ",
											"",
											"tests[\"CA Root certificates:\" ] = true;    ",
											"// Display CA certificates ",
											"for (count = 0; count < jsonData.members.length; count++)",
											"    {",
											"        if ( jsonData.members[count].certType.includes(\"ROOT\") )",
											"        {",
											"            var certificate_name = jsonData.members[count].uri;",
											"            var certificate_subjectname =  jsonData.members[count].subjectName;",
											"            tests[\"- URI: \" + certificate_name + \" -- Subject name=\" + certificate_subjectname ] = true;  ",
											"        }      ",
											"    }",
											" //tests[\" \" ] = true;    ",
											" tests[\"Leaf CA certificates:\" ] = true;    ",
											"",
											"// Display client certificates ",
											"for (count = 0; count < jsonData.members.length; count++)",
											"    {",
											"        if ( jsonData.members[count].certType == \"LEAF_CERT\")",
											"        {",
											"            var certificate_name = jsonData.members[count].uri;",
											"            var certificate_subjectname =  jsonData.members[count].subjectName;",
											"            tests[\"- URI: \" + certificate_name + \" -- Subject name=\" + certificate_subjectname ] = true;  ",
											"        }      ",
											"    }"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/ca",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"ca"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Get-Internal Certificate Authority certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"",
											"var jsonData = JSON.parse(responseBody);",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/ca?filter=certType:INTERNAL",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"ca"
									],
									"query": [
										{
											"key": "filter",
											"value": "certType:INTERNAL"
										}
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Generates an internal CA signed certificate for RabbitMQ clients",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-length": true,
									"host": true,
									"user-agent": true,
									"accept": true,
									"accept-encoding": true,
									"connection": true,
									"content-type": true
								}
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n   \"commonName\" : \"default\"\r\n}"
								},
								"url": {
									"raw": "https://{{composer}}/rest/certificates/client/rabbitmq",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"client",
										"rabbitmq"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Get-SCMB RabbitMq default certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/client/rabbitmq/keypair/default",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"client",
										"rabbitmq",
										"keypair",
										"default"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Get-LIOGW Root CA certificate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "800"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/ca/LIOGW-CA",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"ca",
										"LIOGW-CA"
									]
								},
								"description": "Login Session"
							},
							"response": []
						},
						{
							"name": "Get-Server SSL certificate of hpe.com",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "X-API-Version",
										"value": "{{xapiversion}}"
									},
									{
										"key": "Auth",
										"value": "{{sessionID}}"
									}
								],
								"url": {
									"raw": "https://{{composer}}/rest/certificates/https/remote/hpe.com",
									"protocol": "https",
									"host": [
										"{{composer}}"
									],
									"path": [
										"rest",
										"certificates",
										"https",
										"remote",
										"hpe.com"
									]
								},
								"description": "Login Session"
							},
							"response": []
						}
					]
				},
				{
					"name": "1- Login-sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/login-sessions",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"login-sessions"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "2- Get-X-API-Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"//Get Fabric URI",
									"var xapiversion =  jsonData.currentVersion;",
									"",
									"//Set environment variable",
									"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
									"",
									"//Display X-API-version in test results",
									"tests[\"X API version = \" + xapiversion ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "800"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/version",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"version"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Modes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/modes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"modes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Modes - Current",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/modes/current-mode",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"modes",
								"current-mode"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Modes - FIPS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/modes/FIPS",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"modes",
								"FIPS"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Protocols",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Protocols - CNSA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols/mode/CNSA",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols",
								"mode",
								"CNSA"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Protocols Details - CNSA",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols/TLSv1.1?mode=CNSA",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols",
								"TLSv1.1"
							],
							"query": [
								{
									"key": "mode",
									"value": "CNSA"
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Global-Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security/global-settings",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security",
								"global-settings"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Algorithm - Signature / FIPS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/service-algorithms/signature?mode=FIPS&external=true&list=true",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"service-algorithms",
								"signature"
							],
							"query": [
								{
									"key": "mode",
									"value": "FIPS"
								},
								{
									"key": "external",
									"value": "true"
								},
								{
									"key": "list",
									"value": "true"
								},
								{
									"key": "application",
									"value": "java",
									"disabled": true
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "3- Get-Security-Algorithms - Signature / Legacy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/service-algorithms/signature?mode=LEGACY&external=true&list=true",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"service-algorithms",
								"signature"
							],
							"query": [
								{
									"key": "mode",
									"value": "LEGACY"
								},
								{
									"key": "external",
									"value": "true"
								},
								{
									"key": "list",
									"value": "true"
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "4- Put-Security-Protocols_TLS1.2-only (Careful, reboots OV)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "    [  \r\n        {\r\n        \"protocolName\":\"TLSv1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\":\"TLSv1.1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\":\"TLSv1.2\",\r\n        \"enabled\":true\r\n        }\r\n  ]"
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols"
							]
						},
						"description": "Be careful, this command reboots OneView !"
					},
					"response": []
				},
				{
					"name": "4- Put-Security-Protocols-Remove-insecure-ciphers-in-TLSv1.2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " [  \r\n        {\r\n        \"protocolName\":\"TLSv1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\":\"TLSv1.1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\": \"TLSv1.2\",\r\n        \"enabled\": true,\r\n        \"cipherSuites\": [\r\n            {\r\n                \"type\": \"SecurityCipherSuiteV1\",\r\n                \"cipherSuiteName\": \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\r\n                \"enabled\": false\r\n            },\r\n            {\r\n                \"type\": \"SecurityCipherSuiteV1\",\r\n                \"cipherSuiteName\": \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\r\n                \"enabled\": false\r\n            }  \r\n        ]\r\n    }\r\n ]"
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols"
							]
						},
						"description": "Fixes insecured TLS/SSL Server Supports The Use of Static Key Ciphers"
					},
					"response": []
				},
				{
					"name": "4- Put-Security-Protocols-Remove-insecure-ciphers-in-TLSv1.2 Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " [  \r\n        {\r\n        \"protocolName\":\"TLSv1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\":\"TLSv1.1\",\r\n        \"enabled\":false\r\n        },\r\n        {\r\n        \"protocolName\": \"TLSv1.2\",\r\n        \"enabled\": true,\r\n        \"cipherSuites\": [\r\n            {\r\n                \"type\": \"SecurityCipherSuiteV1\",\r\n                \"cipherSuiteName\": \"TLS_RSA_WITH_AES_128_CBC_SHA256\",\r\n                \"enabled\": false\r\n            },\r\n            {\r\n                \"type\": \"SecurityCipherSuiteV1\",\r\n                \"cipherSuiteName\": \"TLS_RSA_WITH_AES_256_CBC_SHA256\",\r\n                \"enabled\": false\r\n            }  \r\n        ]\r\n    }\r\n ]"
						},
						"url": {
							"raw": "https://{{composer}}/rest/security-standards/protocols",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"security-standards",
								"protocols"
							]
						},
						"description": "Fixes insecured TLS/SSL Server Supports The Use of Static Key Ciphers"
					},
					"response": []
				},
				{
					"name": "3- Get-Appliance-Encryption-Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/appliance-encryption-key",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance-encryption-key"
							]
						}
					},
					"response": []
				},
				{
					"name": "3- Get-Appliance-SSH-Host-Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{composer}}/rest/appliance/sshhostkeys",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"appliance",
								"sshhostkeys"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Server-Hardware",
			"item": [
				{
					"name": "Get-Server-Hardware",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-hardware/",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-hardware",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Server-Hardware : Frame 4 bay3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"//Get Fabric URI\r",
									"var uri =  jsonData.members[0].uri\r",
									"\r",
									"//Set environment variable\r",
									"postman.setEnvironmentVariable(\"uri\", uri);\r",
									"\r",
									"//Display X-API-version in test results\r",
									"tests[\"URI = \" + uri ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-hardware/?filter=\"name EQ 'Frame4, bay 3'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-hardware",
								""
							],
							"query": [
								{
									"key": "filter",
									"value": "\"name EQ 'Frame4, bay 3'\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Server-Hardware iLO SSO URL",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}{{uri}}/iloSsoUrl",
							"protocol": "https",
							"host": [
								"{{composer}}{{uri}}"
							],
							"path": [
								"iloSsoUrl"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Server Profiles",
			"item": [
				{
					"name": "1- Login-sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "1000"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/login-sessions",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"login-sessions"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-profiles",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profiles"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get Profiles - Filter name rhel-1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-profiles?filter=\"name EQ 'rhel-1'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profiles"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"name EQ 'rhel-1'\""
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "2-Create an advanced Gen10 profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");",
									"",
									"",
									"//Display Location value in test results",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; ",
									"",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Auth",
								"value": "{{sessionID}}",
								"type": "text"
							},
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "\r\n    {\r\n        \"type\" : \"ServerProfileV11\",\r\n        \"name\" : \"Profile-3\",\r\n        \"serverHardwareUri\" : \"/rest/server-hardware/33343538-3435-4A32-3230-313130364752\",\r\n        \"affinity\" : \"Bay\",\r\n        \"macType\" : \"Virtual\",\r\n        \"serialNumberType\" : \"Virtual\",\r\n        \"wwnType\" : \"Virtual\",\r\n        \"hideUnusedFlexNics\" : true,\r\n        \"connectionSettings\" : {\r\n            \"connections\" : [{\r\n                    \"id\" : 1,\r\n                    \"name\" : \"connection1\",\r\n                    \"functionType\" : \"Ethernet\",\r\n                    \"portId\" : \"Mezz 3:1-a\",\r\n                    \"requestedMbps\" : 2500,\r\n                    \"networkUri\" : \"/rest/ethernet-networks/f39ae9da-ced8-4803-bb5c-477e153a19f6\",\r\n                    \"boot\" : {\r\n                        \"priority\" : \"Primary\",\r\n                        \"ethernetBootType\" : \"PXE\"\r\n                    }\r\n                }, {\r\n                    \"id\" : 2,\r\n                    \"functionType\" : \"Ethernet\",\r\n                    \"portId\" : \"Mezz 3:2-a\",\r\n                    \"requestedMbps\" : 2500,\r\n                    \"networkUri\" : \"/rest/ethernet-networks/f39ae9da-ced8-4803-bb5c-477e153a19f6\",\r\n                    \"boot\" : {\r\n                        \"priority\" : \"Secondary\",\r\n                        \"ethernetBootType\" : \"PXE\"\r\n                    }\r\n                }, {\r\n                    \"id\" : 3,\r\n                    \"functionType\" : \"Ethernet\",\r\n                    \"portId\" : \"Mezz 3:1-c\",\r\n                    \"requestedMbps\" : 2500,\r\n                    \"networkUri\" : \"/rest/network-sets/a19ffed5-67e0-4cdd-be0d-e4004a9f381e\",\r\n                    \"boot\" : {\r\n                        \"priority\" : \"NotBootable\"\r\n                    }\r\n                }, {\r\n                    \"id\" : 4,\r\n                    \"functionType\" : \"Ethernet\",\r\n                    \"portId\" : \"Mezz 3:2-c\",\r\n                    \"requestedMbps\" : 2500,\r\n                    \"networkUri\" : \"/rest/network-sets/a19ffed5-67e0-4cdd-be0d-e4004a9f381e\",\r\n                    \"boot\" : {\r\n                        \"priority\" : \"NotBootable\"\r\n                }\r\n                }\r\n            ]\r\n        },\r\n        \"bootMode\" : {\r\n            \"manageMode\" : true,\r\n            \"mode\" : \"UEFIOptimized\",\r\n            \"secureBoot\":  \"Unmanaged\"\r\n        },\r\n        \"boot\" : {\r\n            \"manageBoot\" : true,\r\n            \"order\" : [\r\n                    \"HardDisk\"\r\n             \r\n            ]\r\n        },\r\n        \"bios\" : {\r\n            \"manageBios\" : true,\r\n            \"overriddenSettings\" : []\r\n        },\r\n        \"localStorage\" : {\r\n            \"sasLogicalJBODs\" : [],\r\n            \"controllers\" : [\r\n            \t  {\r\n                            \"deviceSlot\":  \"Embedded\",\r\n                            \"mode\":  \"Mixed\",\r\n                            \"initialize\":  false,\r\n                            \"importConfiguration\":  false,\r\n                            \"driveWriteCache\":  \"Unmanaged\",\r\n                            \"predictiveSpareRebuild\":  \"Unmanaged\",\r\n                            \"logicalDrives\":  [\r\n                                                  {\r\n                                                      \"name\":  \"OS_RAID1\",\r\n                                                      \"raidLevel\":  \"RAID1\",\r\n                                                      \"bootable\":  true,\r\n                                                      \"numPhysicalDrives\":  2,\r\n                                                      \"driveTechnology\":  null,\r\n                                                      \"sasLogicalJBODId\":  null,\r\n                                                      \"accelerator\":  \"Unmanaged\",\r\n                                                      \"numSpareDrives\":  null\r\n                                                      \r\n                                                  }\r\n                                              ]\r\n                    }\r\n            \t\r\n            \t],\r\n            \"reapplyState\":  \"NotApplying\"\r\n        },\r\n        \"sanStorage\":  {\r\n                       \"manageSanStorage\":  false,\r\n                       \"volumeAttachments\":  [\r\n\r\n                                             ],\r\n                       \"sanSystemCredentials\":  [\r\n\r\n                                                ],\r\n                       \"reapplyState\":  \"NotApplying\"\r\n                   },\r\n        \"firmware\" : {}\r\n    }"
						},
						"url": {
							"raw": "https://{{composer}}/rest/server-profiles",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "3- Get-Task-object-Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{composer}}/{{taskresult}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{taskresult}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Server Profile Templates",
			"item": [
				{
					"name": "GET Profile Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-profile-templates",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profile-templates"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "GET Profile Templates of ESXi BFLD",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/server-profile-templates?filter=\"name EQ 'RHEL_BFS_Frame4'\"",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profile-templates"
							],
							"query": [
								{
									"key": "filter",
									"value": "\"name EQ 'RHEL_BFS_Frame4'\""
								}
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "POST Profile Templates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"disabled": false,
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"disabled": false,
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n            \"name\": \"ESXi7 BFS-2\",\r\n            \"serverHardwareTypeUri\": \"/rest/server-hardware-types/D6EF0D2C-2000-4034-8CFF-030F1FCE6419\",\r\n            \"enclosureGroupUri\": \"/rest/enclosure-groups/382c6bbf-f3ab-4280-85e0-4d31d6a2e65f\",\r\n            \"affinity\": \"Bay\",\r\n            \"hideUnusedFlexNics\": true,\r\n            \"macType\": \"Virtual\",\r\n            \"wwnType\": \"Virtual\",\r\n            \"serialNumberType\": \"Virtual\",\r\n            \"iscsiInitiatorNameType\": \"AutoGenerated\",\r\n            \"osDeploymentSettings\": null,\r\n            \"firmware\": {\r\n                \"complianceControl\": \"Unchecked\",\r\n                \"manageFirmware\": false,\r\n                \"forceInstallFirmware\": false\r\n            },\r\n            \"connectionSettings\": {\r\n                \"complianceControl\": \"CheckedMinimum\",\r\n                \"manageConnections\": true,\r\n                \"connections\": [\r\n                    {\r\n                        \"id\": 1,\r\n                        \"name\": \"Mgmt1\",\r\n                        \"functionType\": \"Ethernet\",\r\n                        \"networkUri\": \"/rest/ethernet-networks/8da76921-44de-4a6b-b376-2a443960ba8c\",\r\n                        \"portId\": \"Mezz 3:1-a\",\r\n                        \"requestedVFs\": \"0\",\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"priority\": \"NotBootable\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    },\r\n                    {\r\n                        \"id\": 2,\r\n                        \"name\": \"Mgmt2\",\r\n                        \"functionType\": \"Ethernet\",\r\n                        \"networkUri\": \"/rest/ethernet-networks/8da76921-44de-4a6b-b376-2a443960ba8c\",\r\n                        \"portId\": \"Mezz 3:2-a\",\r\n                        \"requestedVFs\": \"0\",\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"priority\": \"NotBootable\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    },\r\n                    {\r\n                        \"id\": 3,\r\n                        \"name\": \"FC-A\",\r\n                        \"functionType\": \"FibreChannel\",\r\n                        \"networkUri\": \"/rest/fc-networks/be06e274-d7c9-48a9-a3e9-92576677ca1f\",\r\n                        \"portId\": \"Mezz 3:1-b\",\r\n                        \"requestedVFs\": null,\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"bootVolumeSource\": \"ManagedVolume\",\r\n                            \"priority\": \"LoadBalanced\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    },\r\n                    {\r\n                        \"id\": 4,\r\n                        \"name\": \"FC-B\",\r\n                        \"functionType\": \"FibreChannel\",\r\n                        \"networkUri\": \"/rest/fc-networks/2471664d-70f6-4ba5-9836-817a5dcb7d8e\",\r\n                        \"portId\": \"Mezz 3:2-b\",\r\n                        \"requestedVFs\": null,\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"bootVolumeSource\": \"ManagedVolume\",\r\n                            \"priority\": \"LoadBalanced\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    },\r\n                    {\r\n                        \"id\": 5,\r\n                        \"name\": \"\",\r\n                        \"functionType\": \"Ethernet\",\r\n                        \"networkUri\": \"/rest/network-sets/fe523364-9d6a-4f9e-ae7c-dc683d20b71e\",\r\n                        \"portId\": \"Mezz 3:1-d\",\r\n                        \"requestedVFs\": \"0\",\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"priority\": \"NotBootable\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    },\r\n                    {\r\n                        \"id\": 6,\r\n                        \"name\": \"\",\r\n                        \"functionType\": \"Ethernet\",\r\n                        \"networkUri\": \"/rest/network-sets/fe523364-9d6a-4f9e-ae7c-dc683d20b71e\",\r\n                        \"portId\": \"Mezz 3:2-d\",\r\n                        \"requestedVFs\": \"0\",\r\n                        \"requestedMbps\": \"2500\",\r\n                        \"boot\": {\r\n                            \"priority\": \"NotBootable\",\r\n                            \"bootVlanId\": null\r\n                        },\r\n                        \"lagName\": null,\r\n                        \"managed\": true,\r\n                        \"isolatedTrunk\": false,\r\n                        \"networkName\": null\r\n                    }\r\n                ]\r\n            },\r\n            \"bootMode\": {\r\n                \"complianceControl\": \"Checked\",\r\n                \"manageMode\": true,\r\n                \"mode\": \"UEFIOptimized\",\r\n                \"pxeBootPolicy\": \"Auto\",\r\n                \"secureBoot\": \"Unmanaged\"\r\n            },\r\n            \"boot\": {\r\n                \"complianceControl\": \"Checked\",\r\n                \"manageBoot\": true,\r\n                \"order\": [\r\n                    \"HardDisk\"\r\n                ]\r\n            },\r\n            \"bios\": {\r\n                \"complianceControl\": \"Unchecked\",\r\n                \"manageBios\": false,\r\n                \"overriddenSettings\": []\r\n            },\r\n            \"managementProcessor\": {\r\n                \"complianceControl\": \"Unchecked\",\r\n                \"manageMp\": false,\r\n                \"mpSettings\": []\r\n            },\r\n            \"localStorage\": {\r\n                \"complianceControl\": \"Unchecked\",\r\n                \"sasLogicalJBODs\": [],\r\n                \"controllers\": []\r\n            },\r\n            \"sanStorage\": {\r\n                \"complianceControl\": \"CheckedMinimum\",\r\n                \"manageSanStorage\": true,\r\n                \"hostOSType\": \"VMware (ESXi)\",\r\n                \"sanSystemCredentials\": [],\r\n                \"volumeAttachments\": [\r\n                    {\r\n                        \"id\": 2,\r\n                        \"associatedTemplateAttachmentId\": \"be2f4f29-1792-43f5-aa94-1e858f0518be\",\r\n                        \"lun\": null,\r\n                        \"lunType\": \"Auto\",\r\n                        \"storagePaths\": [\r\n                            {\r\n                                \"connectionId\": 4,\r\n                                \"networkUri\": \"/rest/fc-networks/2471664d-70f6-4ba5-9836-817a5dcb7d8e\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            },\r\n                            {\r\n                                \"connectionId\": 3,\r\n                                \"networkUri\": \"/rest/fc-networks/be06e274-d7c9-48a9-a3e9-92576677ca1f\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            }\r\n                        ],\r\n                        \"volumeUri\": \"/rest/storage-volumes/DA62AB55-5219-423E-96D8-AD81008A407D\",\r\n                        \"volume\": null,\r\n                        \"isPermanent\": true,\r\n                        \"volumeStorageSystemUri\": \"/rest/storage-systems/MXN6380203\",\r\n                        \"bootVolumePriority\": \"NotBootable\"\r\n                    },\r\n                    {\r\n                        \"id\": 5,\r\n                        \"associatedTemplateAttachmentId\": \"4b0fd278-781e-429e-980c-635b6c01f561\",\r\n                        \"lun\": null,\r\n                        \"lunType\": \"Auto\",\r\n                        \"storagePaths\": [\r\n                            {\r\n                                \"connectionId\": 4,\r\n                                \"networkUri\": \"/rest/fc-networks/2471664d-70f6-4ba5-9836-817a5dcb7d8e\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            },\r\n                            {\r\n                                \"connectionId\": 3,\r\n                                \"networkUri\": \"/rest/fc-networks/be06e274-d7c9-48a9-a3e9-92576677ca1f\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            }\r\n                        ],\r\n                        \"volumeUri\": null,\r\n                        \"volume\": {\r\n                            \"templateUri\": \"/rest/storage-volume-templates/6dc3e0e8-99c3-4893-8973-ad8000e62b91\",\r\n                            \"properties\": {\r\n                                \"name\": \"ESXi Boot\",\r\n                                \"description\": \"\",\r\n                                \"storagePool\": \"/rest/storage-pools/F8AA36B9-CE0B-46B7-8CC8-AD8000E62B87\",\r\n                                \"size\": 21474836480,\r\n                                \"provisioningType\": \"Thin\",\r\n                                \"isShareable\": false,\r\n                                \"templateVersion\": \"1.1\",\r\n                                \"snapshotPool\": \"/rest/storage-pools/F8AA36B9-CE0B-46B7-8CC8-AD8000E62B87\",\r\n                                \"isDeduplicated\": true\r\n                            },\r\n                            \"initialScopeUris\": null\r\n                        },\r\n                        \"isPermanent\": false,\r\n                        \"volumeStorageSystemUri\": \"/rest/storage-systems/MXN6380203\",\r\n                        \"bootVolumePriority\": \"Primary\"\r\n                    },\r\n                    {\r\n                        \"id\": 6,\r\n                        \"associatedTemplateAttachmentId\": \"9345303e-0891-4cbe-9b8a-0ddceaf7fb3e\",\r\n                        \"lun\": null,\r\n                        \"lunType\": \"Auto\",\r\n                        \"storagePaths\": [\r\n                            {\r\n                                \"connectionId\": 4,\r\n                                \"networkUri\": \"/rest/fc-networks/2471664d-70f6-4ba5-9836-817a5dcb7d8e\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            },\r\n                            {\r\n                                \"connectionId\": 3,\r\n                                \"networkUri\": \"/rest/fc-networks/be06e274-d7c9-48a9-a3e9-92576677ca1f\",\r\n                                \"isEnabled\": true,\r\n                                \"targetSelector\": \"Auto\",\r\n                                \"targets\": []\r\n                            }\r\n                        ],\r\n                        \"volumeUri\": \"/rest/storage-volumes/8F8259AD-D16F-4783-A900-AD8100D8B751\",\r\n                        \"volume\": null,\r\n                        \"isPermanent\": true,\r\n                        \"volumeStorageSystemUri\": \"/rest/storage-systems/MXN6380203\",\r\n                        \"bootVolumePriority\": \"NotBootable\"\r\n                    }\r\n                ]\r\n            }\r\n\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://{{composer}}/rest/server-profile-templates",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"server-profile-templates"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Volumes",
			"item": [
				{
					"name": "Get-Volumes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"\r",
									"//Get Storage Pool URI\r",
									"var storagepooluri =  jsonData.members[0].storagePoolUri;\r",
									"\r",
									"//Set environment variable\r",
									"postman.setEnvironmentVariable(\"storagepooluri\", storagepooluri);\r",
									"\r",
									"//Display  \r",
									"tests[\"Storage Pool Uri = \" + storagepooluri ] = true; \r",
									"\r",
									"//Get Volume Template URI\r",
									"var volumeTemplateUri =  jsonData.members[0].volumeTemplateUri\r",
									"\r",
									"//Set environment variable\r",
									"postman.setEnvironmentVariable(\"volumeTemplateUri\", volumeTemplateUri);\r",
									"\r",
									"//Display \r",
									"tests[\"Volume Template URI = \" + volumeTemplateUri ] = true; \r",
									"\r",
									"\r",
									"//Get Snapshot Pool URI\r",
									"var snapshotPoolUri =  jsonData.members[0].deviceSpecificAttributes.snapshotPoolUri\r",
									"\r",
									"//Set environment variable\r",
									"postman.setEnvironmentVariable(\"snapshotPoolUri\", snapshotPoolUri);\r",
									"\r",
									"//Display \r",
									"tests[\"Snapshot Pool URI = \" + snapshotPoolUri ] = true; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/storage-volumes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"storage-volumes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Create-Volume",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var locationhttpheader = postman.getResponseHeader(\"Location\");\r",
									"\r",
									"\r",
									"//Display Location value in test results\r",
									"tests[\"Location task result can be seen here: \" + locationhttpheader ] = true; \r",
									"\r",
									"postman.setEnvironmentVariable(\"taskresult\", locationhttpheader);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"properties\": {\r\n        \"name\": \"Volume123\",\r\n        \"description\": \"volume description\",\r\n        \"storagePool\": \"{{storagepooluri}}\",\r\n        \"size\": 60000,\r\n        \"isShareable\": false,\r\n        \"snapshotPool\": \"{{snapshotPoolUri}}\",\r\n        \"isCompressed\": true,\r\n        \"isDeduplicated\": true,\r\n        \"templateVersion\": \"1.1\"\r\n    },\r\n    \"templateUri\": \"{{volumeTemplateUri}}\",\r\n    \"isPermanent\": true\r\n    \r\n}"
						},
						"url": {
							"raw": "https://{{composer}}/rest/storage-volumes",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"storage-volumes"
							]
						},
						"description": "Login Session"
					},
					"response": []
				},
				{
					"name": "Get-Task-object-Result",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://{{composer}}/{{taskresult}}",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"{{taskresult}}"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "Licenses",
			"item": [
				{
					"name": "Get-Licenses",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/licenses",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"licenses"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-License",
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-API-Version",
								"value": "{{xapiversion}}"
							},
							{
								"key": "Auth",
								"value": "{{sessionID}}"
							}
						],
						"url": {
							"raw": "https://{{composer}}/rest/licenses/7",
							"protocol": "https",
							"host": [
								"{{composer}}"
							],
							"path": [
								"rest",
								"licenses",
								"7"
							]
						},
						"description": "Login Session"
					},
					"response": []
				}
			]
		},
		{
			"name": "1- Login-sessions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "X-API-Version",
						"value": "800"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"authLoginDomain\":\"Local\",\r\n\"password\":\"{{password}}\",\r\n\"userName\":\"administrator\"\r\n}"
				},
				"url": {
					"raw": "https://{{composer}}/rest/login-sessions",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"login-sessions"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "2- Get-X-API-Version",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"",
							"//Get Fabric URI",
							"var xapiversion =  jsonData.currentVersion;",
							"",
							"//Set environment variable",
							"postman.setEnvironmentVariable(\"xapiversion\", xapiversion);",
							"",
							"//Display X-API-version in test results",
							"tests[\"X API version = \" + xapiversion ] = true; "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "800"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/version",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"version"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Get-Ethernet-Networks-on-appliance-1",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/ethernet-networks",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"ethernet-networks"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Get-Metrics-capability",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/metrics/capability",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"metrics",
						"capability"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Get the OS Deployment plans from OneView",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/os-deployment-plans/",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"os-deployment-plans",
						""
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Get the Hypervisor Managers from OneView",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/hypervisor-managers",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"hypervisor-managers"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Get the Hypervisor Cluster Profiles from OneView",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					}
				],
				"url": {
					"raw": "https://{{composer}}/rest/hypervisor-cluster-profiles",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"hypervisor-cluster-profiles"
					]
				},
				"description": "Login Session"
			},
			"response": []
		},
		{
			"name": "Upload CRL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"sessionID\", jsonData.sessionID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "X-API-Version",
						"value": "{{xapiversion}}"
					},
					{
						"key": "Auth",
						"value": "{{sessionID}}"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Content-Type",
						"value": "multipart/form-data"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "File",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "https://{{composer}}/rest/certificates/ca/Symantec Class 3 Secure Server SHA256 SSL CA/crl",
					"protocol": "https",
					"host": [
						"{{composer}}"
					],
					"path": [
						"rest",
						"certificates",
						"ca",
						"Symantec Class 3 Secure Server SHA256 SSL CA",
						"crl"
					]
				},
				"description": "Login Session"
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "taskresult",
			"value": "/rest/tasks/71c3908d-a920-4a63-b76f-ef97714ba0e3"
		}
	]
}
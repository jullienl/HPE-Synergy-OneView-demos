<#

This PowerShell script upgrades/downgrades the iLO firmware of selected computes managed by HPE OneView
without the need to have a local iLO account with administrative privileges.


The selection of computes is done in the 'Computes selection' section of the script.

The iLO firmware upgrade is performed via HPE iLO PowerShell Cmdlets (HPEiLOCmdlets).
- For iLO5: iLO SSO session key generated by HPE OneView is used to create the iLO connection (using XAuthToken parameter)
- For iLO4: a temporary iLO user account is created/deleted with a ramdom password to allow iLO connection as XAuthToken is only supported on iLO5 

Gen9 and Gen10 servers are supported. 

Requirements: 
- Latest HPEOneView library
- HPE iLO PowerShell Cmdlets (install-module HPEiLOCmdlets)
- OneView administrator account
  
 Note: A local iLO account with administrative privileges is NOT required to perform the upgrade

Important note: This script supports Proliant servers and Synergy computes, but for Synergy, it is important to note that upgrading
the iLO only could break the SPP/SSP support matrix, so before upgrading your iLOs, visit the Synergy Software Releases web page
with detailed compatibility information and installation instructions:
https://techhub.hpe.com/us/en/enterprise/docs/index.aspx?doc=/eginfolib/synergy/sw_release_info/index.html


 Author: lionel.jullien@hpe.com
  Date:   Nov 2021
   
#################################################################################
#        (C) Copyright 2017 Hewlett Packard Enterprise Development LP           #
#################################################################################
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
# THE SOFTWARE.                                                                 #
#                                                                               #
#################################################################################
#>

# VARIABLES

# Location of the iLO5 firmware 
$iLO5_Location = "D:\\Kits\\_HP\\iLO\\iLO5\\ilo5_244.bin" 
# Location of the iLO4 firmware 
$iLO4_Location = "D:\\Kits\\_HP\\iLO\\iLO4\\ilo4_277.bin" 

# HPE OneView 
$OV_username = "Administrator"
$OV_IP = "composer.lj.lab"

# Report to be generated in the execution directory
$report = "FW_report.txt"


# MODULES TO INSTALL

# HPEOneView
# If (-not (get-module HPEOneView.630 -ListAvailable )) { Install-Module -Name HPEOneView.630 -scope Allusers -Force }

# HPE iLO PowerShell Cmdlets 
# If (-not (get-module HPEiLOCmdlets -ListAvailable )) { Install-Module -Name HPEiLOCmdlets -scope Allusers -Force }

############################################################################################################################################
$secpasswd = read-host  "Please enter the OneView password" -AsSecureString
 
# Connection to the OneView / Synergy Composer
$credentials = New-Object System.Management.Automation.PSCredential ($OV_username, $secpasswd)
Connect-OVMgmt -Hostname $OV_IP -Credential $credentials | Out-Null

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force


# Added these lines to avoid the error: "The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel."
# due to an invalid Remote Certificate
add-type -TypeDefinition  @"
        using System.Net;
        using System.Security.Cryptography.X509Certificates;
        public class TrustAllCertsPolicy : ICertificatePolicy {
            public bool CheckValidationResult(
                ServicePoint srvPoint, X509Certificate certificate,
                WebRequest request, int certificateProblem) {
                return true;
            }
        }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy



#######################################################################################################################
# Computes selection  

# $Computes = Get-OVServer | select -first 10
# $Computes = Get-OVServer -Name "Frame1, bay 1"
$Computes = (Get-OVServer)[3..4]

# Select first 20
# $Computes = (Get-OVServer)[0..19]

# Select next 20
# $Computes = (Get-OVServer)[20..39]
    
#######################################################################################################################


# Save output to file to execution directory
$directorypath = Split-Path $MyInvocation.MyCommand.Path
Start-Transcript -path $directorypath\$report -append



clear-host


ForEach ($compute in $computes) {

    # Capture of the SSO Session Key
    $iloSession = $compute | Get-OVIloSso -IloRestSession
    $ilosessionkey = $iloSession."X-Auth-Token"

    $iloIP = $compute  | % { $_.mpHostInfo.mpIpAddresses[-1].address }
    $Ilohostname = $compute  | % { $_.mpHostInfo.mpHostName }
    $iloModel = $compute  | % mpmodel
    $serverName = $compute  | % serverName
    if (! $serverName) { $serverName = "Unnamed" }
    $Model = $compute  | % Model
     
    
    if ($iloModel -eq "iLO5") {

        $connection = Connect-HPEiLO -Address $iloIP -XAuthToken $ilosessionkey -DisableCertificateAuthentication

        try {
            $task = Update-HPEiLOFirmware -Location $iLO5_location -Connection $connection -Confirm:$False -Force
            Write-Host "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: $($task.statusinfo.message)"
        }
        catch {
            Write-Host -ForegroundColor Yellow "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: upgrade failure !" 
        }
       
    }
    
    if ($iloModel -eq "iLO4") {
        # Create a temporary iLO user account
        Try {
            # Creation of the body 
            $priv = @{ }
            $priv.Add('RemoteConsolePriv', $True)
            $priv.Add('iLOConfigPriv', $True)
            $priv.Add('VirtualMediaPriv', $True)
            $priv.Add('UserConfigPriv', $True)
            $priv.Add('VirtualPowerAndResetPriv', $True)
            $hp = @{ }
            $hp.Add('LoginName', "POSH_temp_user")
            $hp.Add('Privileges', $priv)
            $oem = @{ }
            $oem.Add('Hp', $hp)
            # Generate a random password for temporary iLO account
            $POSH_temp_user_Password = -join ((65..90) + (97..122) | Get-Random -Count 15 | % { [char]$_ })
            # Add username and password for access
            $user = @{ }
            $user.Add('UserName', "POSH_temp_user")
            $user.Add('Password', $POSH_temp_user_Password)
            $user.Add('Oem', $oem)
            $bodyiloParams = $user | ConvertTo-Json -Depth 99
        
            # Creation of the header using the SSO Session Key 
            $headerilo = @{ } 
            $headerilo["X-Auth-Token"] = $ilosessionkey

            # webrequest to create the new temporary iLO user account
            $rest = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/AccountService/Accounts/" -Body $bodyiloParams  -Headers $headerilo -ContentType "application/json" -Method POST -UseBasicParsing
        }
        catch [System.Net.WebException] {    

            Write-Host -ForegroundColor Yellow "`nUpgrade failure ! Temporary iLO user account cannot be created in iLO [$iloIP] !" 
            continue
        }   


        # Upgrade iLO Firmware using temporary iLO account
      
        try {
            $connection = Connect-HPEiLO -Address $iloIP  -Username "POSH_temp_user" -Password $POSH_temp_user_Password -DisableCertificateAuthentication
            $task = Update-HPEiLOFirmware -Location $iLO4_location -Connection $connection -Confirm:$False -Force
            Write-Host "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: $($task.statusinfo.message)"
            
            $body = @{ } 
            $body["UserName"] = "POSH_temp_user"
            $body["Password"] = $POSH_temp_user_Password
            $body = $body | ConvertTo-Json -Depth 99
            
            # Wait for iLO to reset
            Start-Sleep 45

            do {
                $live = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/SessionService/Sessions/" -body $body -ContentType "application/json" -Method POST
                Start-Sleep 5
            } until ($live)

        }
        catch {
            
            Write-Host -ForegroundColor Yellow "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: upgrade failure !" 
        }


        # Delete temporary iLO account
        Try {
            # Capture temporary iLO account ID
            $headerilo = @{} 
            $headerilo["Content-Type"] = "application/json" 
            $headerilo["X-Auth-Token"] = $live.headers.'X-Auth-Token'
            $headerilo["OData-Version"] = "4.0"

            $iLOaccounts = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/accountservice/accounts/" -ContentType "application/json" -Headers $headerilo -Method GET -UseBasicParsing
            
            foreach ($item in  ($iLOaccounts.Content | Convertfrom-Json).Members | % '@odata.id' ) {
             
                $service_account = Invoke-WebRequest -Uri "https://$iloIP$item" -ContentType "application/json" -Headers $headerilo -Method GET -UseBasicParsing
             
                if ((($service_account.content | ConvertFrom-Json).UserName) -eq "POSH_temp_user") {
                    $account_id = ($service_account.content | ConvertFrom-Json).Id
                }
            }

            $rest = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/AccountService/Accounts/$account_id/" -Headers $headerilo -ContentType "application/json" -Method DELETE -UseBasicParsing
        }
        catch [System.Net.WebException] {    

            Write-Host -ForegroundColor Yellow "`nError ! Temporary iLO user account cannot be deleted in iLO [$iloIP] !" 
            continue
        }   
    }

}
   

write-host ""
Read-Host -Prompt "Operation done ! Hit return to close" 
Disconnect-OVMgmt   
Stop-Transcript





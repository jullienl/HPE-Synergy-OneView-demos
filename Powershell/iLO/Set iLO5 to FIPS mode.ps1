# -------------------------------------------------------------------------------------------------------
#
# This PowerShell script sets the iLO5 FIPS mode of selected computes managed by HPE OneView
# without the need to have a local iLO account with administrative privileges.

# Note: Enabling FIPS mode restarts the iLO, resets critical iLO security settings to the factory default values, 
# clears all user data, and erases the iLO Event Log, the Integrated Management Log and the Security Log.

# The selection of computes is done in the 'Computes selection' section of the script.

# The iLO security mode change is performed via HPE iLO PowerShell Cmdlets (HPEiLOCmdlets) using 
# the iLO SSO session key generated by HPE OneView to create the iLO connection (using XAuthToken parameter)

# Only Gen10 servers are supported. 

# To get a description of the different security modes in iLO5, see https://support.hpe.com/hpesc/public/docDisplay?docId=a00030074en_us&docLocale=en_US

# Requirements: 
# - Latest HPEOneView library
# - HPE iLO PowerShell Cmdlets (install-module HPEiLOCmdlets)
# - OneView administrator account
  

#  Author: lionel.jullien@hpe.com
#  Date:   Dec 2021

#################################################################################
#        (C) Copyright 2017 Hewlett Packard Enterprise Development LP           #
#################################################################################
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
# THE SOFTWARE.                                                                 #
#                                                                               #
#################################################################################

# VARIABLES

# iLO Security mode - Supported values: HighSecurity, FIPS, Production (default)
$mode = "FIPS"

# HPE OneView 
$OV_username = "Administrator"
$OV_IP = "composer.lj.lab"


# MODULES TO INSTALL

# HPEOneView
# If (-not (get-module HPEOneView.630 -ListAvailable )) { Install-Module -Name HPEOneView.630 -scope Allusers -Force }

# HPE iLO PowerShell Cmdlets 
# If (-not (get-module HPEiLOCmdlets -ListAvailable )) { Install-Module -Name HPEiLOCmdlets -scope Allusers -Force }

#################################################################################

$secpasswd = read-host  "Please enter the OneView password" -AsSecureString
 
# Connection to the OneView / Synergy Composer
$credentials = New-Object System.Management.Automation.PSCredential ($OV_username, $secpasswd)
Connect-OVMgmt -Hostname $OV_IP -Credential $credentials | Out-Null

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force


# Added these lines to avoid the error: "The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel."
# due to an invalid Remote Certificate
add-type -TypeDefinition  @"
        using System.Net;
        using System.Security.Cryptography.X509Certificates;
        public class TrustAllCertsPolicy : ICertificatePolicy {
            public bool CheckValidationResult(
                ServicePoint srvPoint, X509Certificate certificate,
                WebRequest request, int certificateProblem) {
                return true;
            }
        }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy


#######################################################################################################################
# Computes selection  

# $Computes = Get-OVServer | select -first 10
# $Computes = Get-OVServer -Name "Frame4, bay 6"
$Computes = (Get-OVServer)[3..4]

# Select first 20
# $Computes = (Get-OVServer)[0..19]

# Select next 20
# $Computes = (Get-OVServer)[20..39]
    
#######################################################################################################################

# Save output to file to execution directory
$directorypath = Split-Path $MyInvocation.MyCommand.Path
Start-Transcript -path $directorypath\$report -append


clear-host

ForEach ($compute in $computes) {

    # Capture of the SSO Session Key
    $iloSession = $compute | Get-OVIloSso -IloRestSession
    $ilosessionkey = $iloSession."X-Auth-Token"

    $iloIP = $compute.mpHostInfo.mpIpAddresses | ? type -ne LinkLocal | % address

    $Ilohostname = $compute  | % { $_.mpHostInfo.mpHostName }
    $iloModel = $compute  | % mpmodel
    $serverName = $compute  | % serverName
    if (! $serverName) { $serverName = "Unnamed" }
    $Model = $compute  | % Model
     
    
    if ($iloModel -eq "iLO5") {

        $connection = Connect-HPEiLO -Address $iloIP -XAuthToken $ilosessionkey -DisableCertificateAuthentication

        try {
            $task = Set-HPEiLOEncryptionSetting -SecurityState $mode -Connection $connection -Confirm:$False -Force
            Write-Host "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: $($task.statusinfo.message)"
            
            # Wait for iLO to reset 
            Start-Sleep 70

            # Wait for OneView to detect a enable to establish a trusted communication with server failure

            Do {
                # Collect data for the 'Unable to establish secure communication with server' alert
                $ilocertalert = `
                ( $compute  | Get-OVAlert -severity Critical -AlertState Locked | Where-Object { 
                        $_.description -Match "Unable to establish trusted communication" 
                    }) 

                sleep 2
            }
            until ( $ilocertalert )

            sleep 20

            # Add new iLO CA-signed certificate to the Oneview trust store
            $addcerttask = Add-OVApplianceTrustedCertificate -ComputerName $iloIP -force | Wait-OVTaskComplete

            if ($addcerttask.taskstate -eq "Completed" ) {
                write-host "iLO certificate added successfully to the Oneview trust store !"   
            }
            else {
                Write-Warning "Error - iLO $iloIP certificate cannot be added to the OneView trust store !"
                $addcerttask.taskErrors
                continue
            }

            sleep 15

            # Server Hardware refresh 
            $compute | Update-OVServer | Wait-OVTaskComplete

            Do {
                # Collect data for the 'Unable to establish secure communication with server' alert
                $ilocertalert = `
                ( $compute  | Get-OVAlert -severity Critical -AlertState Locked | Where-Object { 
                        $_.description -Match "SNMP is disabled" 
                    }) 

                sleep 2
            }
            until ( $ilocertalert )

            # Re-enable SNMP to allow OneView to manage the server
            #   Creation of the body content to enable SNMP
            $bodyiloParams = ConvertTo-Json   @{ SNMP = @{ ProtocolEnabled = $true } }  -Depth 99
            #   Re-capture iLO SSO session key
            $iloSession = $compute | Get-OVIloSso -IloRestSession

            if (-not $iloSession."X-Auth-Token") {
                         
                do {
                    # Refresh the state of the server hardware until an x-auth token is provided
                    $compute | Update-OVServer | Wait-OVTaskComplete
                    sleep 30
                    $iloSession = $compute | Get-OVIloSso -IloRestSession

                } until ($iloSession."X-Auth-Token")

            }    

            #   Creation of the header using the SSO Session Key 
            $headerilo = @{ } 
            $headerilo["X-Auth-Token"] = $iloSession."X-Auth-Token"

            try {
                write-host "`t- Re-enabling SNMP to allow OneView to manage the server" 
                $task = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/Managers/1/NetworkProtocol" -body $bodyiloParams -Headers $headerilo -ContentType "application/json" -Method Patch     
            }
            catch {
                $error[0]
            }           
            sleep 10
            # Reset iLO to activate the SNMP change
            try {
                write-host "`t- Reseting iLO to enable SNMP..." 
                $task = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/Managers/1/Actions/Manager.Reset" -Headers $headerilo -ContentType "application/json" -Method Post
            }
            catch {
                $error[0]
            }           


            # Wait for iLO to reset after activating SNMP 
            Start-Sleep 70

            # Perform a server hardware refresh to re-establish the communication with the iLO
            try {
                write-host "`t- Refresh in progress on [$($compute.name)]..."
                $refreshtask = $compute | Update-OVServer | Wait-OVTaskComplete
            }
            catch {
                Write-Warning "`tError - $($compute.name) refresh cannot be completed!"
                $refreshtask.taskErrors
                continue
            }
            
            # Check that the alerts have been cleared.
            $alerts = $compute  | Get-OVAlert -severity Critical -AlertState Locked
            
            if (-not $alerts ) {
                write-host "`tiLO [$($iloIP)] FIPS mode set successfully and communication with [$($compute.name)] has been restored with Oneview !" -ForegroundColor Cyan 
            }
            else {
                write-warning "`tError ! Communication with [$($compute.name)] cannot be restored with Oneview !"
            }
                      

        }
        catch {
            Write-Host -ForegroundColor Yellow "`n$iloModel $iloIP [$Ilohostname - $serverName - $Model]: Security mode change failure !" 
        }
       
    }

}
   

write-host ""
Read-Host -Prompt "Operation done ! Hit return to close" 
Disconnect-OVMgmt   
Stop-Transcript

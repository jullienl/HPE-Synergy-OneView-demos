<# 

This PowerShell script changes the password of an existing iLO account in selected computes managed by HPE OneView.

The iLO password change is performed via a REST POST method using the iLO SSO session key generated by HPE Oneview, 
so a local iLO account is not required to make that change.

Gen9 and Gen10 servers are supported. 

Requirements: 
- Latest HPEOneView library
- OneView administrator account


  Author: lionel.jullien@hpe.com
  Date:   Nov 2021
    
#################################################################################
#        (C) Copyright 2017 Hewlett Packard Enterprise Development LP           #
#################################################################################
#                                                                               #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
#                                                                               #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR    #
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,      #
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE   #
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER        #
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, #
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN     #
# THE SOFTWARE.                                                                 #
#                                                                               #
#################################################################################
#>

# VARIABLES

# OneView 
$OV_username = "Administrator"
$OV_IP = "composer.lj.lab"

# Report to be generated in the execution directory
$report = "output.txt"


# MODULES TO INSTALL

# HPEOneView
# If (-not (get-module HPEOneView.630 -ListAvailable )) { Install-Module -Name HPEOneView.630 -scope Allusers -Force }

############################################################################################################################################
$secpasswd = read-host  "Please enter the OneView password" -AsSecureString
 
# Connection to the OneView / Synergy Composer
$credentials = New-Object System.Management.Automation.PSCredential ($OV_username, $secpasswd)
Connect-OVMgmt -Hostname $OV_IP -Credential $credentials | Out-Null

Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force


# Added these lines to avoid the error: "The underlying connection was closed: Could not establish trust relationship for the SSL/TLS secure channel."
# due to an invalid Remote Certificate
add-type -TypeDefinition  @"
        using System.Net;
        using System.Security.Cryptography.X509Certificates;
        public class TrustAllCertsPolicy : ICertificatePolicy {
            public bool CheckValidationResult(
                ServicePoint srvPoint, X509Certificate certificate,
                WebRequest request, int certificateProblem) {
                return true;
            }
        }
"@
[System.Net.ServicePointManager]::CertificatePolicy = New-Object TrustAllCertsPolicy


# Capture iLO username account that we want to reset the password
$Defaultaccount = "Administrator"
$Account = Read-Host "Please enter the iLO account name you want the password to be set [$($Defaultaccount)]"
$Account = ($Defaultaccount, $Account)[[bool]$Account]

# Capture iLO user account password
$Defaultadmpassword = "password"
$secuadmpassword = Read-Host "Please enter the password to set to the iLO account '$account' [$($Defaultadmpassword)]" -AsSecureString
$bstr = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($secuadmpassword)
$admpassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($bstr)
$admpassword = ($Defaultadmpassword, $admpassword)[[bool]$admpassword]

#Creation of the body content to pass to iLO
$bodyiloParams = @{Password = $admpassword } | ConvertTo-Json 



#######################################################################################################################
# Computes selection  

# $Computes = Get-OVServer | select -first 10
# $Computes = Get-OVServer -Name "Frame1, bay 5"
# $Computes = (Get-OVServer)[0..2]

# Select first 20
$Computes = (Get-OVServer)[0..19]

# Select next 20
# $Computes = (Get-OVServer)[20..39]
    
#######################################################################################################################


# Save output to file to execution directory
$directorypath = Split-Path $MyInvocation.MyCommand.Path
Start-Transcript -path $directorypath\$report -append


clear-host

ForEach ($compute in $computes) {


    $iloSession = $compute | Get-OVIloSso -IloRestSession
    
    $iloIP = $compute  | % { $_.mpHostInfo.mpIpAddresses[-1].address }
    $Ilohostname = $compute  | % { $_.mpHostInfo.mpHostName }
    $iloModel = $compute  | % mpmodel
    $serverName = $compute  | % serverName
    if (! $serverName) { $serverName = "Unnamed" }

    $Model = $compute  | % Model
                
    # Capture of the SSO Session Key
    $ilosessionkey = $iloSession."X-Auth-Token"
    
    # Creation of the header using the SSO Session Key 

    $headerilo = @{} 
    $headerilo["Content-Type"] = "application/json" 
    $headerilo["X-Auth-Token"] = $ilosessionkey 
    $headerilo["OData-Version"] = "4.0"
           
    clear-variable -name account_id
    # Capture the ILO5 account service ID for the account defined that we want to reset the password
    try {

        $iLOaccounts = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/accountservice/accounts/" -ContentType "application/json" -Headers $headerilo -Method GET -UseBasicParsing
            
        foreach ($item in  ($iLOaccounts.Content | Convertfrom-Json).Members | % '@odata.id' ) {
             
            $service_account = Invoke-WebRequest -Uri "https://$iloIP$item" -ContentType "application/json" -Headers $headerilo -Method GET -UseBasicParsing
             
            if ((($service_account.content | ConvertFrom-Json).UserName) -eq $Account) {
                $account_id = ($service_account.content | ConvertFrom-Json).Id
            }
        }

    }
    catch {
        Write-Host -ForegroundColor Yellow "`n${Ilohostname}: iLO account cannot be captured in $iloModel $iloIP [$serverName - $Model] - Password cannot be changed !" 
        continue
    }

    # write-host "Account ID for $account is $account_id"


    # Password modification 

    if ($account_id) {

        try {

            if ($iloModel -eq "iLO5") {

                $rest = Invoke-WebRequest -Uri "https://$iloIP/redfish/v1/accountservice/accounts/$account_id" -Body $bodyiloParams -ContentType "application/json" -Headers $headerilo -Method PATCH -UseBasicParsing
            }
        
            if ($iloModel -eq "iLO4") {
            
                $rest = Invoke-WebRequest -Uri "https://$iloIP/rest/v1/AccountService/Accounts/$account_id" -Body $bodyiloParams -ContentType "application/json" -Headers $headerilo -Method PATCH -UseBasicParsing

            }

            if ($rest.statusCode -eq "200") {
                Write-Host "`n$Ilohostname : $account password changed successfully in $iloModel $iloIP [$serverName - $Model]"
            }

        }
    
        catch [System.Net.WebException] { 
            $global:result = $_.Exception.Response.GetResponseStream()
            $global:reader = New-Object System.IO.StreamReader($global:result)
            $global:responseBody = $global:reader.ReadToEnd();

            $error_message = ($global:responsebody | ConvertFrom-Json).error | % '@Message.ExtendedInfo' | % MessageId
        
            Write-Host -ForegroundColor Yellow "`n${Ilohostname}: $account password cannot be changed in $iloModel $iloIP [$serverName - $Model] - $error_message" 
        }
    }
    else {
            
        Write-Host -ForegroundColor Yellow "`n${Ilohostname}: $account account cannot be found in $iloModel $iloIP [$serverName - $Model] - Password cannot be changed !" 
        continue

    }


}
  
write-host ""
Read-Host -Prompt "Operation done ! Hit return to close" 
Disconnect-OVMgmt   
Stop-Transcript


 